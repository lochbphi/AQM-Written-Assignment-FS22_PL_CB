{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "2a672a6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.regression.linear_model as sm\n",
    "import math\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "import scipy\n",
    "import seaborn as sns\n",
    "import xlsxwriter\n",
    "\n",
    "import math\n",
    "from math import exp, sqrt, log\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "from scipy import stats\n",
    "\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.regression.linear_model import OLS\n",
    "from statsmodels.tsa.stattools import adfuller\n",
    "from statsmodels.stats.stattools import jarque_bera\n",
    "from statsmodels.stats.stattools import durbin_watson\n",
    "\n",
    "import statsmodels.stats.api as sms\n",
    "from statsmodels.compat import lzip\n",
    "\n",
    "import statsmodels.formula.api as smf\n",
    "import statsmodels.stats.api as sms\n",
    "\n",
    "import xlsxwriter\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import eikon as ek"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d1cad336",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: eikon in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (1.1.14)\n",
      "Requirement already satisfied: pandas>=1.0.0 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (1.3.4)\n",
      "Requirement already satisfied: deprecation in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (2.1.0)\n",
      "Requirement already satisfied: appdirs>=1.4.3 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (1.4.4)\n",
      "Requirement already satisfied: numpy>=1.11.0 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (1.20.3)\n",
      "Requirement already satisfied: httpx>=0.18.0 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (0.22.0)\n",
      "Requirement already satisfied: certifi in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (2021.10.8)\n",
      "Requirement already satisfied: h2==3.* in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (3.2.0)\n",
      "Requirement already satisfied: datetime in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (4.4)\n",
      "Requirement already satisfied: requests==2.* in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (2.26.0)\n",
      "Requirement already satisfied: python-dateutil in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (2.8.2)\n",
      "Requirement already satisfied: rfc3986==1.* in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (1.5.0)\n",
      "Requirement already satisfied: nest-asyncio>=1.5.1 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (1.5.1)\n",
      "Collecting chardet==3.*\n",
      "  Using cached chardet-3.0.4-py2.py3-none-any.whl (133 kB)\n",
      "Requirement already satisfied: websocket-client!=1.0.0,>=0.54.0 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (1.3.1)\n",
      "Requirement already satisfied: idna==2.* in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from eikon) (2.10)\n",
      "Requirement already satisfied: hyperframe<6,>=5.2.0 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from h2==3.*->eikon) (5.2.0)\n",
      "Requirement already satisfied: hpack<4,>=3.0 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from h2==3.*->eikon) (3.0.0)\n",
      "Requirement already satisfied: charset-normalizer~=2.0.0 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from requests==2.*->eikon) (2.0.4)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from requests==2.*->eikon) (1.26.7)\n",
      "Requirement already satisfied: httpcore<0.15.0,>=0.14.5 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from httpx>=0.18.0->eikon) (0.14.7)\n",
      "Requirement already satisfied: sniffio in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from httpx>=0.18.0->eikon) (1.2.0)\n",
      "Requirement already satisfied: h11<0.13,>=0.11 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from httpcore<0.15.0,>=0.14.5->httpx>=0.18.0->eikon) (0.12.0)\n",
      "Requirement already satisfied: anyio==3.* in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from httpcore<0.15.0,>=0.14.5->httpx>=0.18.0->eikon) (3.5.0)\n",
      "Requirement already satisfied: pytz>=2017.3 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from pandas>=1.0.0->eikon) (2021.3)\n",
      "Requirement already satisfied: six>=1.5 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from python-dateutil->eikon) (1.16.0)\n",
      "Requirement already satisfied: zope.interface in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from datetime->eikon) (5.4.0)\n",
      "Requirement already satisfied: packaging in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from deprecation->eikon) (21.0)\n",
      "Requirement already satisfied: pyparsing>=2.0.2 in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from packaging->deprecation->eikon) (3.0.4)\n",
      "Requirement already satisfied: setuptools in /Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages (from zope.interface->datetime->eikon) (58.0.4)\n",
      "Installing collected packages: chardet\n",
      "  Attempting uninstall: chardet\n",
      "    Found existing installation: chardet 4.0.0\n",
      "    Uninstalling chardet-4.0.0:\n",
      "      Successfully uninstalled chardet-4.0.0\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "spyder 5.1.5 requires pyqt5<5.13, which is not installed.\n",
      "spyder 5.1.5 requires pyqtwebengine<5.13, which is not installed.\u001b[0m\n",
      "Successfully installed chardet-3.0.4\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install eikon"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48260273",
   "metadata": {},
   "source": [
    "### Set Refinitiv app key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "09aa437c",
   "metadata": {},
   "outputs": [],
   "source": [
    "ek.set_app_key('SET_APP_KEY')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef79fa4f",
   "metadata": {},
   "source": [
    "# Data "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51bc563a",
   "metadata": {},
   "source": [
    "## Data retrieval from Refinitiv with Excel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3c5dcc79",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Benchmarks 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 766,
   "id": "4c09c87a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Country</th>\n",
       "      <th>USA</th>\n",
       "      <th>SouthKorea</th>\n",
       "      <th>Germany</th>\n",
       "      <th>Sweden</th>\n",
       "      <th>Japan</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>1.5118</td>\n",
       "      <td>2.255</td>\n",
       "      <td>-0.179</td>\n",
       "      <td>0.213</td>\n",
       "      <td>0.070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>1.4562</td>\n",
       "      <td>2.218</td>\n",
       "      <td>-0.343</td>\n",
       "      <td>0.144</td>\n",
       "      <td>0.058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>1.5609</td>\n",
       "      <td>2.583</td>\n",
       "      <td>-0.094</td>\n",
       "      <td>0.373</td>\n",
       "      <td>0.094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>1.4925</td>\n",
       "      <td>2.237</td>\n",
       "      <td>-0.191</td>\n",
       "      <td>0.392</td>\n",
       "      <td>0.069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>1.3071</td>\n",
       "      <td>1.912</td>\n",
       "      <td>-0.380</td>\n",
       "      <td>0.165</td>\n",
       "      <td>0.024</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Country        USA  SouthKorea  Germany  Sweden  Japan\n",
       "Date                                                  \n",
       "2021-12-31  1.5118       2.255   -0.179   0.213  0.070\n",
       "2021-11-30  1.4562       2.218   -0.343   0.144  0.058\n",
       "2021-10-31  1.5609       2.583   -0.094   0.373  0.094\n",
       "2021-09-30  1.4925       2.237   -0.191   0.392  0.069\n",
       "2021-08-31  1.3071       1.912   -0.380   0.165  0.024"
      ]
     },
     "execution_count": 766,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df10yExcel=pd.read_excel('Benchmark10yFR.xlsx')\n",
    "df10yExcel = df10yExcel.drop(df10yExcel.columns[[0, 1, 4, 6, 8, 10]], axis=1)\n",
    "df10yExcel = df10yExcel.drop([0, 1, 2])\n",
    "df10yExcel = df10yExcel.rename({\"Unnamed: 2\":\"Date\",\"Unnamed: 3\":\"USA\", \"Unnamed: 5\":\"SouthKorea\",\"Unnamed: 7\":\"Germany\", \"Unnamed: 9\":\"Sweden\",\"Unnamed: 11\":\"Japan\"}, axis='columns')\n",
    "df10yExcel.Date = pd.to_datetime(df10yExcel.Date)\n",
    "df10yExcel.set_index('Date', inplace=True)\n",
    "df10yExcel = df10yExcel.astype('float')\n",
    "df10yExcel.columns.name = 'Country'\n",
    "df10yExcel.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f5f3b662",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 132 entries, 2021-12-31 to 2011-01-31\n",
      "Data columns (total 5 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   USA         132 non-null    float64\n",
      " 1   SouthKorea  132 non-null    float64\n",
      " 2   Germany     132 non-null    float64\n",
      " 3   Sweden      132 non-null    float64\n",
      " 4   Japan       132 non-null    float64\n",
      "dtypes: float64(5)\n",
      "memory usage: 6.2 KB\n"
     ]
    }
   ],
   "source": [
    "df10yExcel.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6bc85599",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'10y Benchmark'}, xlabel='Date'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df10yExcel.plot(figsize=(8,5), \n",
    "title='10y Benchmark', # Titel\n",
    "grid=True, # Gitternetz\n",
    "ylim=[-2, 5], # y-Achsengrenzwerte (von 0 bis 225)\n",
    "rot=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "faa4c566",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Benchmarks 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c47a1a9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Country</th>\n",
       "      <th>USA</th>\n",
       "      <th>SouthKorea</th>\n",
       "      <th>Germany</th>\n",
       "      <th>Sweden</th>\n",
       "      <th>Japan</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>0.7341</td>\n",
       "      <td>1.672</td>\n",
       "      <td>-0.637</td>\n",
       "      <td>-0.192</td>\n",
       "      <td>-0.089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>0.5670</td>\n",
       "      <td>1.654</td>\n",
       "      <td>-0.748</td>\n",
       "      <td>-0.294</td>\n",
       "      <td>-0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>0.5010</td>\n",
       "      <td>1.835</td>\n",
       "      <td>-0.580</td>\n",
       "      <td>-0.087</td>\n",
       "      <td>-0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>0.2814</td>\n",
       "      <td>1.444</td>\n",
       "      <td>-0.689</td>\n",
       "      <td>-0.286</td>\n",
       "      <td>-0.124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>0.2113</td>\n",
       "      <td>1.249</td>\n",
       "      <td>-0.717</td>\n",
       "      <td>-0.296</td>\n",
       "      <td>-0.132</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Country        USA  SouthKorea  Germany  Sweden  Japan\n",
       "Date                                                  \n",
       "2021-12-31  0.7341       1.672   -0.637  -0.192 -0.089\n",
       "2021-11-30  0.5670       1.654   -0.748  -0.294 -0.125\n",
       "2021-10-31  0.5010       1.835   -0.580  -0.087 -0.100\n",
       "2021-09-30  0.2814       1.444   -0.689  -0.286 -0.124\n",
       "2021-08-31  0.2113       1.249   -0.717  -0.296 -0.132"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2yExcel=pd.read_excel('Benchmark2yFR.xlsx')\n",
    "df2yExcel = df2yExcel.drop(df2yExcel.columns[[0, 1, 4, 6, 8, 10]], axis=1)\n",
    "df2yExcel = df2yExcel.drop([0, 1, 2])\n",
    "df2yExcel = df2yExcel.rename({\"Unnamed: 2\":\"Date\",\"Unnamed: 3\":\"USA\", \"Unnamed: 5\":\"SouthKorea\",\"Unnamed: 7\":\"Germany\", \"Unnamed: 9\":\"Sweden\",\"Unnamed: 11\":\"Japan\"}, axis='columns')\n",
    "df2yExcel.Date = pd.to_datetime(df2yExcel.Date)\n",
    "df2yExcel.set_index('Date', inplace=True)\n",
    "df2yExcel = df2yExcel.astype('float')\n",
    "df2yExcel.columns.name = 'Country'\n",
    "df2yExcel.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "84ad3d16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 132 entries, 2021-12-31 to 2011-01-31\n",
      "Data columns (total 5 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   USA         132 non-null    float64\n",
      " 1   SouthKorea  132 non-null    float64\n",
      " 2   Germany     132 non-null    float64\n",
      " 3   Sweden      132 non-null    float64\n",
      " 4   Japan       132 non-null    float64\n",
      "dtypes: float64(5)\n",
      "memory usage: 6.2 KB\n"
     ]
    }
   ],
   "source": [
    "df2yExcel.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "48212dd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'2y Benchmark'}, xlabel='Date'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df2yExcel.plot(figsize=(8,5), \n",
    "title='2y Benchmark', # Titel\n",
    "grid=True, # Gitternetz\n",
    "ylim=[-2, 5], # y-Achsengrenzwerte (von 0 bis 225)\n",
    "rot=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2639897",
   "metadata": {},
   "source": [
    "## Data retrieval from Refinitiv with API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9a884eb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Benchmarks 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e4d169f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfUS10y = ek.get_timeseries([\"US10YT=RR\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "dfUS10y = dfUS10y.drop(columns = ['HIGH', 'LOW', 'OPEN'])\n",
    "\n",
    "\n",
    "dfKR10y = ek.get_timeseries([\"KR10YT=RR\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "dfKR10y = dfKR10y.drop(columns = ['HIGH', 'LOW', 'OPEN'])\n",
    "\n",
    "\n",
    "dfDE10y = ek.get_timeseries([\"DE10YT=RR\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "dfDE10y = dfDE10y.drop(columns = ['HIGH', 'LOW', 'OPEN'])\n",
    "\n",
    "\n",
    "dfSE10y = ek.get_timeseries([\"SE10YT=RR\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "dfSE10y = dfSE10y.drop(columns = ['HIGH', 'LOW', 'OPEN'])\n",
    "\n",
    "dfJP10y = ek.get_timeseries([\"JP10YT=RR\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "dfJP10y = dfJP10y.drop(columns = ['HIGH', 'LOW', 'OPEN'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1721352d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Country</th>\n",
       "      <th>USA</th>\n",
       "      <th>SouthKorea</th>\n",
       "      <th>Germany</th>\n",
       "      <th>Sweden</th>\n",
       "      <th>Japan</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>3.3743</td>\n",
       "      <td>4.71</td>\n",
       "      <td>3.163</td>\n",
       "      <td>3.346</td>\n",
       "      <td>1.215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>3.4217</td>\n",
       "      <td>4.67</td>\n",
       "      <td>3.171</td>\n",
       "      <td>3.325</td>\n",
       "      <td>1.259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>3.4703</td>\n",
       "      <td>4.48</td>\n",
       "      <td>3.358</td>\n",
       "      <td>3.332</td>\n",
       "      <td>1.255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>3.29</td>\n",
       "      <td>4.48</td>\n",
       "      <td>3.236</td>\n",
       "      <td>3.21</td>\n",
       "      <td>1.206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>3.0589</td>\n",
       "      <td>4.23</td>\n",
       "      <td>3.021</td>\n",
       "      <td>2.907</td>\n",
       "      <td>1.155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>1.3071</td>\n",
       "      <td>1.912</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.165</td>\n",
       "      <td>0.024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>1.4925</td>\n",
       "      <td>2.237</td>\n",
       "      <td>-0.191</td>\n",
       "      <td>0.392</td>\n",
       "      <td>0.065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>1.5609</td>\n",
       "      <td>2.583</td>\n",
       "      <td>-0.094</td>\n",
       "      <td>0.373</td>\n",
       "      <td>0.094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>1.4562</td>\n",
       "      <td>2.218</td>\n",
       "      <td>-0.343</td>\n",
       "      <td>0.144</td>\n",
       "      <td>0.059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>1.5118</td>\n",
       "      <td>2.255</td>\n",
       "      <td>-0.179</td>\n",
       "      <td>0.213</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Country        USA  SouthKorea  Germany  Sweden  Japan\n",
       "Date                                                  \n",
       "2011-01-31  3.3743        4.71    3.163   3.346  1.215\n",
       "2011-02-28  3.4217        4.67    3.171   3.325  1.259\n",
       "2011-03-31  3.4703        4.48    3.358   3.332  1.255\n",
       "2011-04-30    3.29        4.48    3.236    3.21  1.206\n",
       "2011-05-31  3.0589        4.23    3.021   2.907  1.155\n",
       "...            ...         ...      ...     ...    ...\n",
       "2021-08-31  1.3071       1.912    -0.38   0.165  0.024\n",
       "2021-09-30  1.4925       2.237   -0.191   0.392  0.065\n",
       "2021-10-31  1.5609       2.583   -0.094   0.373  0.094\n",
       "2021-11-30  1.4562       2.218   -0.343   0.144  0.059\n",
       "2021-12-31  1.5118       2.255   -0.179   0.213   0.07\n",
       "\n",
       "[132 rows x 5 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfUS10y.rename({'CLOSE': 'USA'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfKR10y.rename({'CLOSE': 'SouthKorea'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfDE10y.rename({'CLOSE': 'Germany'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfSE10y.rename({'CLOSE': 'Sweden'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfJP10y.rename({'CLOSE': 'Japan'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfall10y = pd.concat([dfUS10y, dfKR10y, dfDE10y, dfSE10y, dfJP10y], axis=1, join='inner')\n",
    "dfall10y.columns.name = 'Country'\n",
    "dfall10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e8d9b78e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'2y Benchmark'}, xlabel='Date'>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dfall10y.plot(figsize=(8,5), \n",
    "title='2y Benchmark', # Titel\n",
    "grid=True, # Gitternetz\n",
    "ylim=[-2, 5], # y-Achsengrenzwerte (von 0 bis 225)\n",
    "rot=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9c0ae6fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Benchmarks 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f40d8dbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfUS2y = ek.get_timeseries([\"US2YT=RR\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "dfUS2y = dfUS2y.drop(columns = ['HIGH', 'LOW', 'OPEN'])\n",
    "\n",
    "\n",
    "dfKR2y = ek.get_timeseries([\"KR2YT=RR\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "dfKR2y = dfKR2y.drop(columns = ['HIGH', 'LOW', 'OPEN'])\n",
    "\n",
    "\n",
    "dfDE2y = ek.get_timeseries([\"DE2YT=RR\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "dfDE2y = dfDE2y.drop(columns = ['HIGH', 'LOW', 'OPEN'])\n",
    "\n",
    "\n",
    "dfSE2y = ek.get_timeseries([\"SE2YT=RR\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "dfSE2y = dfSE2y.drop(columns = ['HIGH', 'LOW', 'OPEN'])\n",
    "\n",
    "dfJP2y = ek.get_timeseries([\"JP2YT=RR\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "dfJP2y = dfJP2y.drop(columns = ['HIGH', 'LOW', 'OPEN'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "054e6bd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Country</th>\n",
       "      <th>USA</th>\n",
       "      <th>SouthKorea</th>\n",
       "      <th>Germany</th>\n",
       "      <th>Sweden</th>\n",
       "      <th>Japan</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>0.5698</td>\n",
       "      <td>3.87</td>\n",
       "      <td>1.37</td>\n",
       "      <td>1.963</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>0.6881</td>\n",
       "      <td>3.64</td>\n",
       "      <td>1.525</td>\n",
       "      <td>2.205</td>\n",
       "      <td>0.245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>0.833</td>\n",
       "      <td>3.57</td>\n",
       "      <td>1.795</td>\n",
       "      <td>2.788</td>\n",
       "      <td>0.215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>0.6092</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.774</td>\n",
       "      <td>2.77</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>0.4685</td>\n",
       "      <td>3.52</td>\n",
       "      <td>1.609</td>\n",
       "      <td>2.504</td>\n",
       "      <td>0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>0.2113</td>\n",
       "      <td>1.249</td>\n",
       "      <td>-0.717</td>\n",
       "      <td>-0.296</td>\n",
       "      <td>-0.132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>0.2814</td>\n",
       "      <td>1.444</td>\n",
       "      <td>-0.689</td>\n",
       "      <td>-0.286</td>\n",
       "      <td>-0.124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>0.501</td>\n",
       "      <td>1.835</td>\n",
       "      <td>-0.58</td>\n",
       "      <td>-0.087</td>\n",
       "      <td>-0.101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>0.567</td>\n",
       "      <td>1.654</td>\n",
       "      <td>-0.748</td>\n",
       "      <td>-0.294</td>\n",
       "      <td>-0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>0.7341</td>\n",
       "      <td>1.672</td>\n",
       "      <td>-0.637</td>\n",
       "      <td>-0.192</td>\n",
       "      <td>-0.089</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Country        USA  SouthKorea  Germany  Sweden  Japan\n",
       "Date                                                  \n",
       "2011-01-31  0.5698        3.87     1.37   1.963    0.2\n",
       "2011-02-28  0.6881        3.64    1.525   2.205  0.245\n",
       "2011-03-31   0.833        3.57    1.795   2.788  0.215\n",
       "2011-04-30  0.6092         3.7    1.774    2.77    0.2\n",
       "2011-05-31  0.4685        3.52    1.609   2.504   0.18\n",
       "...            ...         ...      ...     ...    ...\n",
       "2021-08-31  0.2113       1.249   -0.717  -0.296 -0.132\n",
       "2021-09-30  0.2814       1.444   -0.689  -0.286 -0.124\n",
       "2021-10-31   0.501       1.835    -0.58  -0.087 -0.101\n",
       "2021-11-30   0.567       1.654   -0.748  -0.294 -0.125\n",
       "2021-12-31  0.7341       1.672   -0.637  -0.192 -0.089\n",
       "\n",
       "[132 rows x 5 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfUS2y.rename({'CLOSE': 'USA'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfKR2y.rename({'CLOSE': 'SouthKorea'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfDE2y.rename({'CLOSE': 'Germany'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfSE2y.rename({'CLOSE': 'Sweden'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfJP2y.rename({'CLOSE': 'Japan'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfall2y = pd.concat([dfUS2y, dfKR2y, dfDE2y, dfSE2y, dfJP2y], axis=1, join='inner')\n",
    "dfall2y.columns.name = 'Country'\n",
    "dfall2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "212f53cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'2y Benchmark'}, xlabel='Date'>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dfall2y.plot(figsize=(8,5), \n",
    "title='2y Benchmark', # Titel\n",
    "grid=True, # Gitternetz\n",
    "ylim=[-2, 5], # y-Achsengrenzwerte (von 0 bis 225)\n",
    "rot=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d7d71c7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Macroeconomic data: Unemployment Rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fe3007e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfUSUR = ek.get_timeseries([\"USUNR=ECI\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "\n",
    "dfKRUR = ek.get_timeseries([\"KRUNR=ECI\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "\n",
    "dfDEUR = ek.get_timeseries([\"DEUNR=ECI\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "\n",
    "dfSEUR = ek.get_timeseries([\"SEUNR=ECI\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "\n",
    "dfJPUR = ek.get_timeseries([\"JPUNR=ECI\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8eb51253",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Country</th>\n",
       "      <th>USA</th>\n",
       "      <th>SouthKorea</th>\n",
       "      <th>Germany</th>\n",
       "      <th>Sweden</th>\n",
       "      <th>Japan</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>9.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>7.4</td>\n",
       "      <td>8.6</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>9.0</td>\n",
       "      <td>3.7</td>\n",
       "      <td>7.3</td>\n",
       "      <td>8.3</td>\n",
       "      <td>4.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>9.0</td>\n",
       "      <td>3.8</td>\n",
       "      <td>7.2</td>\n",
       "      <td>8.6</td>\n",
       "      <td>4.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>9.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>7.1</td>\n",
       "      <td>8.3</td>\n",
       "      <td>4.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>9.0</td>\n",
       "      <td>3.3</td>\n",
       "      <td>7.1</td>\n",
       "      <td>8.3</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>5.2</td>\n",
       "      <td>3.1</td>\n",
       "      <td>5.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>2.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.1</td>\n",
       "      <td>5.4</td>\n",
       "      <td>8.2</td>\n",
       "      <td>2.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.2</td>\n",
       "      <td>5.4</td>\n",
       "      <td>7.6</td>\n",
       "      <td>2.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>4.2</td>\n",
       "      <td>3.2</td>\n",
       "      <td>5.3</td>\n",
       "      <td>7.5</td>\n",
       "      <td>2.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>3.9</td>\n",
       "      <td>3.8</td>\n",
       "      <td>5.2</td>\n",
       "      <td>7.3</td>\n",
       "      <td>2.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Country     USA  SouthKorea  Germany  Sweden  Japan\n",
       "Date                                               \n",
       "2011-01-31  9.1         3.5      7.4     8.6    4.8\n",
       "2011-02-28  9.0         3.7      7.3     8.3    4.7\n",
       "2011-03-31  9.0         3.8      7.2     8.6    4.7\n",
       "2011-04-30  9.1         3.5      7.1     8.3    4.7\n",
       "2011-05-31  9.0         3.3      7.1     8.3    4.6\n",
       "...         ...         ...      ...     ...    ...\n",
       "2021-08-31  5.2         3.1      5.5     8.5    2.8\n",
       "2021-09-30  4.7         3.1      5.4     8.2    2.8\n",
       "2021-10-31  4.6         3.2      5.4     7.6    2.7\n",
       "2021-11-30  4.2         3.2      5.3     7.5    2.8\n",
       "2021-12-31  3.9         3.8      5.2     7.3    2.7\n",
       "\n",
       "[132 rows x 5 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfUSUR.rename({'VALUE': 'USA'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfKRUR.rename({'VALUE': 'SouthKorea'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfDEUR.rename({'VALUE': 'Germany'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfSEUR.rename({'VALUE': 'Sweden'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfJPUR.rename({'VALUE': 'Japan'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfallUR = pd.concat([dfUSUR, dfKRUR, dfDEUR, dfSEUR, dfJPUR], axis=1, join='inner')\n",
    "dfallUR.columns.name = 'Country'\n",
    "dfallUR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "56430c55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Country</th>\n",
       "      <th>USA</th>\n",
       "      <th>SouthKorea</th>\n",
       "      <th>Germany</th>\n",
       "      <th>Sweden</th>\n",
       "      <th>Japan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>6.004545</td>\n",
       "      <td>3.584848</td>\n",
       "      <td>6.122727</td>\n",
       "      <td>7.701515</td>\n",
       "      <td>3.290909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.074338</td>\n",
       "      <td>0.354574</td>\n",
       "      <td>0.696840</td>\n",
       "      <td>0.996098</td>\n",
       "      <td>0.733022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.900000</td>\n",
       "      <td>5.900000</td>\n",
       "      <td>2.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.300000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.450000</td>\n",
       "      <td>3.600000</td>\n",
       "      <td>6.200000</td>\n",
       "      <td>7.600000</td>\n",
       "      <td>3.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.525000</td>\n",
       "      <td>3.800000</td>\n",
       "      <td>6.800000</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>3.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>14.700000</td>\n",
       "      <td>5.200000</td>\n",
       "      <td>7.400000</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>4.800000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Country         USA  SouthKorea     Germany      Sweden       Japan\n",
       "count    132.000000  132.000000  132.000000  132.000000  132.000000\n",
       "mean       6.004545    3.584848    6.122727    7.701515    3.290909\n",
       "std        2.074338    0.354574    0.696840    0.996098    0.733022\n",
       "min        3.500000    3.000000    4.900000    5.900000    2.200000\n",
       "25%        4.300000    3.300000    5.500000    7.000000    2.700000\n",
       "50%        5.450000    3.600000    6.200000    7.600000    3.100000\n",
       "75%        7.525000    3.800000    6.800000    8.500000    3.900000\n",
       "max       14.700000    5.200000    7.400000   10.300000    4.800000"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfallUR.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ea82617",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Macroeconomic data: CPI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9f2b9d12",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfUSCPI = ek.get_timeseries([\"USCPNY=ECI\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "\n",
    "dfKRCPI = ek.get_timeseries([\"KRCPIY=ECI\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "\n",
    "dfDECPI = ek.get_timeseries([\"DECPIY=ECI\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "\n",
    "dfSECPI = ek.get_timeseries([\"SECPIY=ECI\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')\n",
    "\n",
    "dfJPCPI = ek.get_timeseries([\"JPCPO=ECI\"], \n",
    "                       start_date=\"2011-01-01\",  \n",
    "                       end_date=\"2022-01-01\",\n",
    "                      interval='monthly')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4e977389",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Country</th>\n",
       "      <th>USA</th>\n",
       "      <th>SouthKorea</th>\n",
       "      <th>Germany</th>\n",
       "      <th>Sweden</th>\n",
       "      <th>Japan</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>1.6</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2.1</td>\n",
       "      <td>-0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>2.1</td>\n",
       "      <td>3.9</td>\n",
       "      <td>1.9</td>\n",
       "      <td>2.1</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>2.7</td>\n",
       "      <td>4.1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>3.2</td>\n",
       "      <td>3.8</td>\n",
       "      <td>1.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>3.6</td>\n",
       "      <td>3.9</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>5.3</td>\n",
       "      <td>2.6</td>\n",
       "      <td>3.9</td>\n",
       "      <td>2.1</td>\n",
       "      <td>-0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>5.4</td>\n",
       "      <td>2.4</td>\n",
       "      <td>4.1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.2</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2.8</td>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>6.8</td>\n",
       "      <td>3.8</td>\n",
       "      <td>5.2</td>\n",
       "      <td>3.3</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>7.0</td>\n",
       "      <td>3.7</td>\n",
       "      <td>5.3</td>\n",
       "      <td>3.9</td>\n",
       "      <td>0.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Country     USA  SouthKorea  Germany  Sweden  Japan\n",
       "Date                                               \n",
       "2011-01-31  1.6         3.4      1.7     2.1   -0.6\n",
       "2011-02-28  2.1         3.9      1.9     2.1   -0.5\n",
       "2011-03-31  2.7         4.1      2.0     2.6   -0.5\n",
       "2011-04-30  3.2         3.8      1.9     3.0   -0.4\n",
       "2011-05-31  3.6         3.9      2.0     3.0   -0.4\n",
       "...         ...         ...      ...     ...    ...\n",
       "2021-08-31  5.3         2.6      3.9     2.1   -0.4\n",
       "2021-09-30  5.4         2.4      4.1     2.5    0.2\n",
       "2021-10-31  6.2         3.2      4.5     2.8    0.1\n",
       "2021-11-30  6.8         3.8      5.2     3.3    0.6\n",
       "2021-12-31  7.0         3.7      5.3     3.9    0.8\n",
       "\n",
       "[132 rows x 5 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfUSCPI.rename({'VALUE': 'USA'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfKRCPI.rename({'VALUE': 'SouthKorea'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfDECPI.rename({'VALUE': 'Germany'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfSECPI.rename({'VALUE': 'Sweden'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfJPCPI.rename({'VALUE': 'Japan'},\n",
    "             axis=1, inplace=True)\n",
    "\n",
    "dfallCPI = pd.concat([dfUSCPI, dfKRCPI, dfDECPI, dfSECPI, dfJPCPI], axis=1, join='inner')\n",
    "dfallCPI.columns.name = 'Country'\n",
    "dfallCPI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2d5c0fb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Country</th>\n",
       "      <th>USA</th>\n",
       "      <th>SouthKorea</th>\n",
       "      <th>Germany</th>\n",
       "      <th>Sweden</th>\n",
       "      <th>Japan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.006818</td>\n",
       "      <td>1.572727</td>\n",
       "      <td>1.453030</td>\n",
       "      <td>1.131061</td>\n",
       "      <td>0.464394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.319449</td>\n",
       "      <td>1.100110</td>\n",
       "      <td>0.994753</td>\n",
       "      <td>1.029350</td>\n",
       "      <td>0.992193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-0.200000</td>\n",
       "      <td>-0.400000</td>\n",
       "      <td>-0.300000</td>\n",
       "      <td>-0.600000</td>\n",
       "      <td>-1.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.375000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>-0.225000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.800000</td>\n",
       "      <td>1.300000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1.300000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.400000</td>\n",
       "      <td>2.100000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.900000</td>\n",
       "      <td>0.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>4.700000</td>\n",
       "      <td>5.300000</td>\n",
       "      <td>3.900000</td>\n",
       "      <td>3.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Country         USA  SouthKorea     Germany      Sweden       Japan\n",
       "count    132.000000  132.000000  132.000000  132.000000  132.000000\n",
       "mean       2.006818    1.572727    1.453030    1.131061    0.464394\n",
       "std        1.319449    1.100110    0.994753    1.029350    0.992193\n",
       "min       -0.200000   -0.400000   -0.300000   -0.600000   -1.200000\n",
       "25%        1.375000    0.800000    0.800000    0.100000   -0.225000\n",
       "50%        1.800000    1.300000    1.500000    1.300000    0.300000\n",
       "75%        2.400000    2.100000    2.000000    1.900000    0.700000\n",
       "max        7.000000    4.700000    5.300000    3.900000    3.700000"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfallCPI.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f5b7a36",
   "metadata": {},
   "source": [
    "## Date Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d5fa433b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Country\n",
       "USA           0\n",
       "SouthKorea    0\n",
       "Germany       0\n",
       "Sweden        0\n",
       "Japan         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfall2y.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4bebdd24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Country\n",
       "USA           0\n",
       "SouthKorea    0\n",
       "Germany       0\n",
       "Sweden        0\n",
       "Japan         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfall10y.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "29fdea79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Country\n",
       "USA           0\n",
       "SouthKorea    0\n",
       "Germany       0\n",
       "Sweden        0\n",
       "Japan         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfallUR.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "41c6a8e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Country\n",
       "USA           0\n",
       "SouthKorea    0\n",
       "Germany       0\n",
       "Sweden        0\n",
       "Japan         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfallCPI.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d5168ed",
   "metadata": {},
   "source": [
    "## Comparsion of the data from Excel and date from API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "31942ae7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Comparsion Benchmark 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "2be6e09a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Country     Germany  Japan  SouthKorea  Sweden   USA\n",
      "Date                                                \n",
      "2011-01-31     True   True        True    True  True\n",
      "2011-02-28     True   True        True    True  True\n",
      "2011-03-31     True   True        True    True  True\n",
      "2011-04-30     True   True        True    True  True\n",
      "2011-05-31     True   True        True    True  True\n",
      "...             ...    ...         ...     ...   ...\n",
      "2021-08-31     True   True        True    True  True\n",
      "2021-09-30     True  False        True    True  True\n",
      "2021-10-31     True   True        True    True  True\n",
      "2021-11-30     True  False        True    True  True\n",
      "2021-12-31     True   True        True    True  True\n",
      "\n",
      "[132 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "dfTrue10y= df10yExcel.sort_index().sort_index(axis=1) == dfall10y.sort_index().sort_index(axis=1)\n",
    "print(dfTrue10y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "512c5dcd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Country</th>\n",
       "      <th>Germany</th>\n",
       "      <th>Japan</th>\n",
       "      <th>SouthKorea</th>\n",
       "      <th>Sweden</th>\n",
       "      <th>USA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>132</td>\n",
       "      <td>71</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Country Germany  Japan SouthKorea Sweden   USA\n",
       "count       132    132        132    132   132\n",
       "unique        1      2          1      1     1\n",
       "top        True  False       True   True  True\n",
       "freq        132     71        132    132   132"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfTrue10y.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5397a33c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.32571969696969694"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfall10y.Japan.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c360eaf7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3259090909090909"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df10yExcel.Japan.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 767,
   "id": "00d58003",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.00018939393939398919"
      ]
     },
     "execution_count": 767,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfall10y.Japan.mean() - df10yExcel.Japan.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "322a2613",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Comparsion Benchmark 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "aec2e3cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Country     Germany  Japan  SouthKorea  Sweden   USA\n",
      "Date                                                \n",
      "2011-01-31     True   True        True    True  True\n",
      "2011-02-28     True   True        True    True  True\n",
      "2011-03-31     True   True        True    True  True\n",
      "2011-04-30     True  False        True    True  True\n",
      "2011-05-31     True   True        True    True  True\n",
      "...             ...    ...         ...     ...   ...\n",
      "2021-08-31     True   True        True    True  True\n",
      "2021-09-30     True   True        True    True  True\n",
      "2021-10-31     True  False        True    True  True\n",
      "2021-11-30     True   True        True    True  True\n",
      "2021-12-31     True   True        True    True  True\n",
      "\n",
      "[132 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "dfTrue2y= df2yExcel.sort_index().sort_index(axis=1) == dfall2y.sort_index().sort_index(axis=1)\n",
    "print(dfTrue2y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "4b01505d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Country</th>\n",
       "      <th>Germany</th>\n",
       "      <th>Japan</th>\n",
       "      <th>SouthKorea</th>\n",
       "      <th>Sweden</th>\n",
       "      <th>USA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>132</td>\n",
       "      <td>88</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Country Germany Japan SouthKorea Sweden   USA\n",
       "count       132   132        132    132   132\n",
       "unique        1     2          1      1     1\n",
       "top        True  True       True   True  True\n",
       "freq        132    88        132    132   132"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfTrue2y.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7ad2e6e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.046575757575757604"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfall2y.Japan.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "b7f59e87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.04676515151515152"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2yExcel.Japan.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab43d48f",
   "metadata": {},
   "source": [
    "## Countries"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87ca021c",
   "metadata": {},
   "source": [
    "### USA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "666dd9fb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>0.5698</td>\n",
       "      <td>3.3743</td>\n",
       "      <td>9.1</td>\n",
       "      <td>1.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>0.6881</td>\n",
       "      <td>3.4217</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>0.833</td>\n",
       "      <td>3.4703</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>0.6092</td>\n",
       "      <td>3.29</td>\n",
       "      <td>9.1</td>\n",
       "      <td>3.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>0.4685</td>\n",
       "      <td>3.0589</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>0.2113</td>\n",
       "      <td>1.3071</td>\n",
       "      <td>5.2</td>\n",
       "      <td>5.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>0.2814</td>\n",
       "      <td>1.4925</td>\n",
       "      <td>4.7</td>\n",
       "      <td>5.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>0.501</td>\n",
       "      <td>1.5609</td>\n",
       "      <td>4.6</td>\n",
       "      <td>6.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>0.567</td>\n",
       "      <td>1.4562</td>\n",
       "      <td>4.2</td>\n",
       "      <td>6.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>0.7341</td>\n",
       "      <td>1.5118</td>\n",
       "      <td>3.9</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 2y  Benchmark 10y  UNR  CPI\n",
       "Date                                             \n",
       "2011-01-31        0.5698         3.3743  9.1  1.6\n",
       "2011-02-28        0.6881         3.4217  9.0  2.1\n",
       "2011-03-31         0.833         3.4703  9.0  2.7\n",
       "2011-04-30        0.6092           3.29  9.1  3.2\n",
       "2011-05-31        0.4685         3.0589  9.0  3.6\n",
       "...                  ...            ...  ...  ...\n",
       "2021-08-31        0.2113         1.3071  5.2  5.3\n",
       "2021-09-30        0.2814         1.4925  4.7  5.4\n",
       "2021-10-31         0.501         1.5609  4.6  6.2\n",
       "2021-11-30         0.567         1.4562  4.2  6.8\n",
       "2021-12-31        0.7341         1.5118  3.9  7.0\n",
       "\n",
       "[132 rows x 4 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = [dfall2y[\"USA\"], dfall10y[\"USA\"], dfallUR[\"USA\"], dfallCPI[\"USA\"]]\n",
    "\n",
    "headers = [\"Benchmark 2y\", \"Benchmark 10y\",\"UNR\", \"CPI\"]\n",
    "\n",
    "dfUSA = pd.concat(data, axis=1, keys=headers)\n",
    "dfUSA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 768,
   "id": "64a10344",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.859259</td>\n",
       "      <td>2.073188</td>\n",
       "      <td>6.004545</td>\n",
       "      <td>2.006818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.765335</td>\n",
       "      <td>0.647038</td>\n",
       "      <td>2.074338</td>\n",
       "      <td>1.319449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.109300</td>\n",
       "      <td>0.533100</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>-0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.264725</td>\n",
       "      <td>1.637625</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>1.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.572300</td>\n",
       "      <td>2.121850</td>\n",
       "      <td>5.450000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.273875</td>\n",
       "      <td>2.510750</td>\n",
       "      <td>7.525000</td>\n",
       "      <td>2.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.870900</td>\n",
       "      <td>3.470300</td>\n",
       "      <td>14.700000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Benchmark 2y  Benchmark 10y         UNR         CPI\n",
       "count    132.000000     132.000000  132.000000  132.000000\n",
       "mean       0.859259       2.073188    6.004545    2.006818\n",
       "std        0.765335       0.647038    2.074338    1.319449\n",
       "min        0.109300       0.533100    3.500000   -0.200000\n",
       "25%        0.264725       1.637625    4.300000    1.375000\n",
       "50%        0.572300       2.121850    5.450000    1.800000\n",
       "75%        1.273875       2.510750    7.525000    2.400000\n",
       "max        2.870900       3.470300   14.700000    7.000000"
      ]
     },
     "execution_count": 768,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfUSA.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2e11729",
   "metadata": {},
   "source": [
    "### Germany"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "68e6233e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>1.37</td>\n",
       "      <td>3.163</td>\n",
       "      <td>7.4</td>\n",
       "      <td>1.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>1.525</td>\n",
       "      <td>3.171</td>\n",
       "      <td>7.3</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>1.795</td>\n",
       "      <td>3.358</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>1.774</td>\n",
       "      <td>3.236</td>\n",
       "      <td>7.1</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>1.609</td>\n",
       "      <td>3.021</td>\n",
       "      <td>7.1</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>-0.717</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>5.5</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>-0.689</td>\n",
       "      <td>-0.191</td>\n",
       "      <td>5.4</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>-0.58</td>\n",
       "      <td>-0.094</td>\n",
       "      <td>5.4</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>-0.748</td>\n",
       "      <td>-0.343</td>\n",
       "      <td>5.3</td>\n",
       "      <td>5.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>-0.637</td>\n",
       "      <td>-0.179</td>\n",
       "      <td>5.2</td>\n",
       "      <td>5.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 2y  Benchmark 10y  UNR  CPI\n",
       "Date                                             \n",
       "2011-01-31          1.37          3.163  7.4  1.7\n",
       "2011-02-28         1.525          3.171  7.3  1.9\n",
       "2011-03-31         1.795          3.358  7.2  2.0\n",
       "2011-04-30         1.774          3.236  7.1  1.9\n",
       "2011-05-31         1.609          3.021  7.1  2.0\n",
       "...                  ...            ...  ...  ...\n",
       "2021-08-31        -0.717          -0.38  5.5  3.9\n",
       "2021-09-30        -0.689         -0.191  5.4  4.1\n",
       "2021-10-31         -0.58         -0.094  5.4  4.5\n",
       "2021-11-30        -0.748         -0.343  5.3  5.2\n",
       "2021-12-31        -0.637         -0.179  5.2  5.3\n",
       "\n",
       "[132 rows x 4 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2 = [dfall2y[\"Germany\"], dfall10y[\"Germany\"], dfallUR[\"Germany\"], dfallCPI[\"Germany\"]]\n",
    "\n",
    "headers = [\"Benchmark 2y\", \"Benchmark 10y\",\"UNR\", \"CPI\"]\n",
    "\n",
    "dfGermany = pd.concat(data2, axis=1, keys=headers)\n",
    "dfGermany"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db6e129f",
   "metadata": {},
   "source": [
    "### Sweden"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "8f511b27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>1.963</td>\n",
       "      <td>3.346</td>\n",
       "      <td>8.6</td>\n",
       "      <td>2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>2.205</td>\n",
       "      <td>3.325</td>\n",
       "      <td>8.3</td>\n",
       "      <td>2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>2.788</td>\n",
       "      <td>3.332</td>\n",
       "      <td>8.6</td>\n",
       "      <td>2.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>2.77</td>\n",
       "      <td>3.21</td>\n",
       "      <td>8.3</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>2.504</td>\n",
       "      <td>2.907</td>\n",
       "      <td>8.3</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>-0.296</td>\n",
       "      <td>0.165</td>\n",
       "      <td>8.5</td>\n",
       "      <td>2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>-0.286</td>\n",
       "      <td>0.392</td>\n",
       "      <td>8.2</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>-0.087</td>\n",
       "      <td>0.373</td>\n",
       "      <td>7.6</td>\n",
       "      <td>2.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>-0.294</td>\n",
       "      <td>0.144</td>\n",
       "      <td>7.5</td>\n",
       "      <td>3.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>-0.192</td>\n",
       "      <td>0.213</td>\n",
       "      <td>7.3</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 2y  Benchmark 10y  UNR  CPI\n",
       "Date                                             \n",
       "2011-01-31         1.963          3.346  8.6  2.1\n",
       "2011-02-28         2.205          3.325  8.3  2.1\n",
       "2011-03-31         2.788          3.332  8.6  2.6\n",
       "2011-04-30          2.77           3.21  8.3  3.0\n",
       "2011-05-31         2.504          2.907  8.3  3.0\n",
       "...                  ...            ...  ...  ...\n",
       "2021-08-31        -0.296          0.165  8.5  2.1\n",
       "2021-09-30        -0.286          0.392  8.2  2.5\n",
       "2021-10-31        -0.087          0.373  7.6  2.8\n",
       "2021-11-30        -0.294          0.144  7.5  3.3\n",
       "2021-12-31        -0.192          0.213  7.3  3.9\n",
       "\n",
       "[132 rows x 4 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data3 = [dfall2y[\"Sweden\"], dfall10y[\"Sweden\"], dfallUR[\"Sweden\"], dfallCPI[\"Sweden\"]]\n",
    "\n",
    "headers = [\"Benchmark 2y\", \"Benchmark 10y\",\"UNR\", \"CPI\"]\n",
    "\n",
    "dfSweden = pd.concat(data3, axis=1, keys=headers)\n",
    "dfSweden"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa54652e",
   "metadata": {},
   "source": [
    "### South Korea"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "fd919508",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>3.87</td>\n",
       "      <td>4.71</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>3.64</td>\n",
       "      <td>4.67</td>\n",
       "      <td>3.7</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>3.57</td>\n",
       "      <td>4.48</td>\n",
       "      <td>3.8</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>3.7</td>\n",
       "      <td>4.48</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>3.52</td>\n",
       "      <td>4.23</td>\n",
       "      <td>3.3</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>1.249</td>\n",
       "      <td>1.912</td>\n",
       "      <td>3.1</td>\n",
       "      <td>2.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>1.444</td>\n",
       "      <td>2.237</td>\n",
       "      <td>3.1</td>\n",
       "      <td>2.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>1.835</td>\n",
       "      <td>2.583</td>\n",
       "      <td>3.2</td>\n",
       "      <td>3.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>1.654</td>\n",
       "      <td>2.218</td>\n",
       "      <td>3.2</td>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>1.672</td>\n",
       "      <td>2.255</td>\n",
       "      <td>3.8</td>\n",
       "      <td>3.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 2y  Benchmark 10y  UNR  CPI\n",
       "Date                                             \n",
       "2011-01-31          3.87           4.71  3.5  3.4\n",
       "2011-02-28          3.64           4.67  3.7  3.9\n",
       "2011-03-31          3.57           4.48  3.8  4.1\n",
       "2011-04-30           3.7           4.48  3.5  3.8\n",
       "2011-05-31          3.52           4.23  3.3  3.9\n",
       "...                  ...            ...  ...  ...\n",
       "2021-08-31         1.249          1.912  3.1  2.6\n",
       "2021-09-30         1.444          2.237  3.1  2.4\n",
       "2021-10-31         1.835          2.583  3.2  3.2\n",
       "2021-11-30         1.654          2.218  3.2  3.8\n",
       "2021-12-31         1.672          2.255  3.8  3.7\n",
       "\n",
       "[132 rows x 4 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data4 = [dfall2y[\"SouthKorea\"], dfall10y[\"SouthKorea\"], dfallUR[\"SouthKorea\"], dfallCPI[\"SouthKorea\"]]\n",
    "\n",
    "headers = [\"Benchmark 2y\", \"Benchmark 10y\",\"UNR\", \"CPI\"]\n",
    "\n",
    "dfSouthKorea = pd.concat(data4, axis=1, keys=headers)\n",
    "dfSouthKorea"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77689ddd",
   "metadata": {},
   "source": [
    "### Japan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e0aabd65",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1.215</td>\n",
       "      <td>4.8</td>\n",
       "      <td>-0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>0.245</td>\n",
       "      <td>1.259</td>\n",
       "      <td>4.7</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>0.215</td>\n",
       "      <td>1.255</td>\n",
       "      <td>4.7</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>0.2</td>\n",
       "      <td>1.206</td>\n",
       "      <td>4.7</td>\n",
       "      <td>-0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>0.18</td>\n",
       "      <td>1.155</td>\n",
       "      <td>4.6</td>\n",
       "      <td>-0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-31</th>\n",
       "      <td>-0.132</td>\n",
       "      <td>0.024</td>\n",
       "      <td>2.8</td>\n",
       "      <td>-0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-30</th>\n",
       "      <td>-0.124</td>\n",
       "      <td>0.065</td>\n",
       "      <td>2.8</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-31</th>\n",
       "      <td>-0.101</td>\n",
       "      <td>0.094</td>\n",
       "      <td>2.7</td>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>-0.125</td>\n",
       "      <td>0.059</td>\n",
       "      <td>2.8</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>-0.089</td>\n",
       "      <td>0.07</td>\n",
       "      <td>2.7</td>\n",
       "      <td>0.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 2y  Benchmark 10y  UNR  CPI\n",
       "Date                                             \n",
       "2011-01-31           0.2          1.215  4.8 -0.6\n",
       "2011-02-28         0.245          1.259  4.7 -0.5\n",
       "2011-03-31         0.215          1.255  4.7 -0.5\n",
       "2011-04-30           0.2          1.206  4.7 -0.4\n",
       "2011-05-31          0.18          1.155  4.6 -0.4\n",
       "...                  ...            ...  ...  ...\n",
       "2021-08-31        -0.132          0.024  2.8 -0.4\n",
       "2021-09-30        -0.124          0.065  2.8  0.2\n",
       "2021-10-31        -0.101          0.094  2.7  0.1\n",
       "2021-11-30        -0.125          0.059  2.8  0.6\n",
       "2021-12-31        -0.089           0.07  2.7  0.8\n",
       "\n",
       "[132 rows x 4 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data5 = [dfall2y[\"Japan\"], dfall10y[\"Japan\"], dfallUR[\"Japan\"], dfallCPI[\"Japan\"]]\n",
    "\n",
    "headers = [\"Benchmark 2y\", \"Benchmark 10y\",\"UNR\", \"CPI\"]\n",
    "\n",
    "dfJapan = pd.concat(data5, axis=1, keys=headers)\n",
    "dfJapan"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87957a7d",
   "metadata": {},
   "source": [
    "## Export to SQL Database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 769,
   "id": "327ac7c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfJapan.to_csv('Japan.csv')\n",
    "dfGermany.to_csv('Germany.csv')\n",
    "dfUSA.to_csv('USA.csv')\n",
    "dfSouthKorea.to_csv('SouthKorea.csv')\n",
    "dfSweden.to_csv('Sweden.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49f12160",
   "metadata": {},
   "source": [
    "### Establish SQL connection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 785,
   "id": "157d98f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.6.0\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "from sqlite3 import Error\n",
    " \n",
    "\n",
    "\"\"\" create a database connection tool to a SQLite database \"\"\"\n",
    "\n",
    "def create_connection(db_file):\n",
    "    conn = None\n",
    "    try:\n",
    "        conn = sqlite3.connect(db_file)\n",
    "        print(sqlite3.version)\n",
    "    except Error as e:\n",
    "        print(e)\n",
    "    finally:\n",
    "        if conn:\n",
    "            conn.close()\n",
    " \n",
    " \n",
    "if __name__ == '__main__':\n",
    "    create_connection(\"/Users/philipplochbuhler/OneDrive - ZHAW/ZHAW/Master/Semester 2/AQM/02.05.22/AQM_GroupR_Database.db\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 786,
   "id": "a8e98020",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opened database successfully\n"
     ]
    }
   ],
   "source": [
    "conn = sqlite3.connect(\"/Users/philipplochbuhler/OneDrive - ZHAW/ZHAW/Master/Semester 2/AQM/02.05.22/AQM_GroupR_Database.db\")\n",
    "\n",
    "print(\"Opened database successfully\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74c85b74",
   "metadata": {},
   "source": [
    "### import data tables from SQL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 795,
   "id": "69365028",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-31</td>\n",
       "      <td>0.200</td>\n",
       "      <td>1.215</td>\n",
       "      <td>4.8</td>\n",
       "      <td>-0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-02-28</td>\n",
       "      <td>0.245</td>\n",
       "      <td>1.259</td>\n",
       "      <td>4.7</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-03-31</td>\n",
       "      <td>0.215</td>\n",
       "      <td>1.255</td>\n",
       "      <td>4.7</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-04-30</td>\n",
       "      <td>0.200</td>\n",
       "      <td>1.206</td>\n",
       "      <td>4.7</td>\n",
       "      <td>-0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-05-31</td>\n",
       "      <td>0.180</td>\n",
       "      <td>1.155</td>\n",
       "      <td>4.6</td>\n",
       "      <td>-0.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Benchmark 2y  Benchmark 10y  UNR  CPI\n",
       "0  2011-01-31         0.200          1.215  4.8 -0.6\n",
       "1  2011-02-28         0.245          1.259  4.7 -0.5\n",
       "2  2011-03-31         0.215          1.255  4.7 -0.5\n",
       "3  2011-04-30         0.200          1.206  4.7 -0.4\n",
       "4  2011-05-31         0.180          1.155  4.6 -0.4"
      ]
     },
     "execution_count": 795,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn = sqlite3.connect('AQM_GroupR_Database.db')\n",
    "c = conn.cursor()\n",
    "c.execute('SELECT * FROM Japan')\n",
    "dfJapanSQL=c.fetchall()\n",
    "dfJapanSQL = pd.DataFrame (dfJapanSQL, columns = ['Date', 'Benchmark 2y', 'Benchmark 10y', 'UNR', 'CPI'])\n",
    "dfJapanSQL.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 793,
   "id": "08ed85e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-31</td>\n",
       "      <td>1.370</td>\n",
       "      <td>3.163</td>\n",
       "      <td>7.4</td>\n",
       "      <td>1.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-02-28</td>\n",
       "      <td>1.525</td>\n",
       "      <td>3.171</td>\n",
       "      <td>7.3</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-03-31</td>\n",
       "      <td>1.795</td>\n",
       "      <td>3.358</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-04-30</td>\n",
       "      <td>1.774</td>\n",
       "      <td>3.236</td>\n",
       "      <td>7.1</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-05-31</td>\n",
       "      <td>1.609</td>\n",
       "      <td>3.021</td>\n",
       "      <td>7.1</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Benchmark 2y  Benchmark 10y  UNR  CPI\n",
       "0  2011-01-31         1.370          3.163  7.4  1.7\n",
       "1  2011-02-28         1.525          3.171  7.3  1.9\n",
       "2  2011-03-31         1.795          3.358  7.2  2.0\n",
       "3  2011-04-30         1.774          3.236  7.1  1.9\n",
       "4  2011-05-31         1.609          3.021  7.1  2.0"
      ]
     },
     "execution_count": 793,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn = sqlite3.connect('AQM_GroupR_Database.db')\n",
    "c = conn.cursor()\n",
    "c.execute('SELECT * FROM Germany')\n",
    "dfGermanySQL=c.fetchall()\n",
    "dfGermanySQL = pd.DataFrame (dfGermanySQL, columns = ['Date', 'Benchmark 2y', 'Benchmark 10y', 'UNR', 'CPI'])\n",
    "dfGermanySQL.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 798,
   "id": "37560c87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-31</td>\n",
       "      <td>3.87</td>\n",
       "      <td>4.71</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-02-28</td>\n",
       "      <td>3.64</td>\n",
       "      <td>4.67</td>\n",
       "      <td>3.7</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-03-31</td>\n",
       "      <td>3.57</td>\n",
       "      <td>4.48</td>\n",
       "      <td>3.8</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-04-30</td>\n",
       "      <td>3.70</td>\n",
       "      <td>4.48</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-05-31</td>\n",
       "      <td>3.52</td>\n",
       "      <td>4.23</td>\n",
       "      <td>3.3</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Benchmark 2y  Benchmark 10y  UNR  CPI\n",
       "0  2011-01-31          3.87           4.71  3.5  3.4\n",
       "1  2011-02-28          3.64           4.67  3.7  3.9\n",
       "2  2011-03-31          3.57           4.48  3.8  4.1\n",
       "3  2011-04-30          3.70           4.48  3.5  3.8\n",
       "4  2011-05-31          3.52           4.23  3.3  3.9"
      ]
     },
     "execution_count": 798,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn = sqlite3.connect('AQM_GroupR_Database.db')\n",
    "c = conn.cursor()\n",
    "c.execute('SELECT * FROM SouthKorea')\n",
    "dfSouthKoreaSQL=c.fetchall()\n",
    "dfSouthKoreaSQL = pd.DataFrame (dfSouthKoreaSQL, columns = ['Date', 'Benchmark 2y', 'Benchmark 10y', 'UNR', 'CPI'])\n",
    "dfSouthKoreaSQL.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 799,
   "id": "19c1b582",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-31</td>\n",
       "      <td>3.87</td>\n",
       "      <td>4.71</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-02-28</td>\n",
       "      <td>3.64</td>\n",
       "      <td>4.67</td>\n",
       "      <td>3.7</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-03-31</td>\n",
       "      <td>3.57</td>\n",
       "      <td>4.48</td>\n",
       "      <td>3.8</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-04-30</td>\n",
       "      <td>3.70</td>\n",
       "      <td>4.48</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-05-31</td>\n",
       "      <td>3.52</td>\n",
       "      <td>4.23</td>\n",
       "      <td>3.3</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Benchmark 2y  Benchmark 10y  UNR  CPI\n",
       "0  2011-01-31          3.87           4.71  3.5  3.4\n",
       "1  2011-02-28          3.64           4.67  3.7  3.9\n",
       "2  2011-03-31          3.57           4.48  3.8  4.1\n",
       "3  2011-04-30          3.70           4.48  3.5  3.8\n",
       "4  2011-05-31          3.52           4.23  3.3  3.9"
      ]
     },
     "execution_count": 799,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn = sqlite3.connect('AQM_GroupR_Database.db')\n",
    "c = conn.cursor()\n",
    "c.execute('SELECT * FROM SouthKorea')\n",
    "dfSwedenSQL=c.fetchall()\n",
    "dfSwedenSQL = pd.DataFrame (dfSwedenSQL, columns = ['Date', 'Benchmark 2y', 'Benchmark 10y', 'UNR', 'CPI'])\n",
    "dfSwedenSQL.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 800,
   "id": "ea4db905",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-31</td>\n",
       "      <td>3.87</td>\n",
       "      <td>4.71</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-02-28</td>\n",
       "      <td>3.64</td>\n",
       "      <td>4.67</td>\n",
       "      <td>3.7</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-03-31</td>\n",
       "      <td>3.57</td>\n",
       "      <td>4.48</td>\n",
       "      <td>3.8</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-04-30</td>\n",
       "      <td>3.70</td>\n",
       "      <td>4.48</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-05-31</td>\n",
       "      <td>3.52</td>\n",
       "      <td>4.23</td>\n",
       "      <td>3.3</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Benchmark 2y  Benchmark 10y  UNR  CPI\n",
       "0  2011-01-31          3.87           4.71  3.5  3.4\n",
       "1  2011-02-28          3.64           4.67  3.7  3.9\n",
       "2  2011-03-31          3.57           4.48  3.8  4.1\n",
       "3  2011-04-30          3.70           4.48  3.5  3.8\n",
       "4  2011-05-31          3.52           4.23  3.3  3.9"
      ]
     },
     "execution_count": 800,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn = sqlite3.connect('AQM_GroupR_Database.db')\n",
    "c = conn.cursor()\n",
    "c.execute('SELECT * FROM SouthKorea')\n",
    "dfUSASQL=c.fetchall()\n",
    "dfUSASQL = pd.DataFrame (dfUSASQL, columns = ['Date', 'Benchmark 2y', 'Benchmark 10y', 'UNR', 'CPI'])\n",
    "dfUSASQL.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5ce5075",
   "metadata": {},
   "source": [
    "# Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "eda4b040",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Regression\n",
    "def OLS(y,x):\n",
    "\n",
    "    #if const is not None: x['const']=1\n",
    "        \n",
    "    #Beta estimates [(X'X)^-1]X'Y\n",
    "    x_xt= np.dot(x.T, x)        # multiply vector X with transposed vector X'\n",
    "    x_x_inv=np.linalg.inv(x_xt)      # invert the matrix\n",
    "\n",
    "    x_y=np.dot(x.T,y)              # multiply transposed vector X' with Y\n",
    "    est_betas= np.dot(x_x_inv,x_y)  # multiply (X'X)^-1 with X'Y\n",
    "    est_Y=np.dot(est_betas,x.T)  # multiply est_betas with X'\n",
    "        \n",
    "    nb_obs=x.shape[0]  \n",
    "    rank=x.shape[1] #equals p = number of regressors \n",
    "    deg_freedom_residual=nb_obs-rank\n",
    "    \n",
    "    #Y estimate\n",
    "    est_y = np.dot(x,est_betas)\n",
    "    est_resid = y-est_y\n",
    "    est_resid_2 = np.dot(est_resid.T,est_resid)\n",
    "    \n",
    "    est_sigma_2= est_resid_2 / nb_obs\n",
    "    \n",
    "    est_var_covar_beta = np.dot(x_x_inv,est_sigma_2)  #Variance-Covariance Matrix of Betas\n",
    "        #var_beta_est = np.kron(x_x_inv,est_sigma_2) #???\n",
    "    \n",
    "    est_var_beta = np.diag(est_var_covar_beta)\n",
    "    est_sd_beta=np.sqrt(est_var_beta)    # standard errors\n",
    "    t_stats= est_betas/est_sd_beta      # t-stats\n",
    "    pvals = stats.t.sf(np.abs(t_stats), nb_obs-1)*2\n",
    "  \n",
    "    SST=np.var(y)*nb_obs\n",
    "    SSR=est_resid_2\n",
    "    R_2=1-(SSR/SST)\n",
    "    \n",
    "    llf = (-0.5*nb_obs * np.log(2 * np.pi*est_sigma_2)) -(0.5*nb_obs*(1/np.log(est_sigma_2))*est_resid_2)\n",
    "    \n",
    "    OLS_results = {\n",
    "        'Y': y,\n",
    "        'est_Y': est_Y,\n",
    "        'X': x,\n",
    "        'est_betas': est_betas,\n",
    "        'est_resid': est_resid,\n",
    "        'nb_obs': nb_obs,\n",
    "        'deg_freedom_residual': deg_freedom_residual,\n",
    "        'est_sigma_2': est_sigma_2,\n",
    "        'est_var_covar_beta': est_var_covar_beta,\n",
    "        't_stats': t_stats,\n",
    "        'pvals': pvals,\n",
    "        'llf': llf,\n",
    "        'nb_parms': rank,\n",
    "        'R_2': R_2\n",
    "    }\n",
    "                                                          \n",
    "    return OLS_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "f457929a",
   "metadata": {},
   "outputs": [],
   "source": [
    "?sms.jarque_bera"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78e2be55",
   "metadata": {},
   "source": [
    "## Analysis USA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "c6927212",
   "metadata": {},
   "outputs": [],
   "source": [
    "#was soll genau analysiert werden?? \n",
    "\n",
    "#unbedingt überall kontrollieren, was X und Y sind \n",
    "\n",
    "#schauen bei Multicollinearity, was predicted ist (CPI)\n",
    "\n",
    "#brauchts noch normality test?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9e58ea7",
   "metadata": {},
   "source": [
    "### Regression USA 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 462,
   "id": "5c080db3",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 2y</td>   <th>  R-squared:         </th> <td>   0.463</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.455</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   55.71</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 02 May 2022</td> <th>  Prob (F-statistic):</th> <td>3.63e-18</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:33:39</td>     <th>  Log-Likelihood:    </th> <td> -110.40</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>   226.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>   235.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>    2.4189</td> <td>    0.174</td> <td>   13.880</td> <td> 0.000</td> <td>    2.074</td> <td>    2.764</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>   -0.2519</td> <td>    0.024</td> <td>  -10.553</td> <td> 0.000</td> <td>   -0.299</td> <td>   -0.205</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>   -0.0234</td> <td>    0.038</td> <td>   -0.623</td> <td> 0.534</td> <td>   -0.098</td> <td>    0.051</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>17.470</td> <th>  Durbin-Watson:     </th> <td>   0.224</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  20.601</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.961</td> <th>  Prob(JB):          </th> <td>3.36e-05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.225</td> <th>  Cond. No.          </th> <td>    24.0</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:           Benchmark 2y   R-squared:                       0.463\n",
       "Model:                            OLS   Adj. R-squared:                  0.455\n",
       "Method:                 Least Squares   F-statistic:                     55.71\n",
       "Date:                Mon, 02 May 2022   Prob (F-statistic):           3.63e-18\n",
       "Time:                        20:33:39   Log-Likelihood:                -110.40\n",
       "No. Observations:                 132   AIC:                             226.8\n",
       "Df Residuals:                     129   BIC:                             235.5\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const          2.4189      0.174     13.880      0.000       2.074       2.764\n",
       "UNR           -0.2519      0.024    -10.553      0.000      -0.299      -0.205\n",
       "CPI           -0.0234      0.038     -0.623      0.534      -0.098       0.051\n",
       "==============================================================================\n",
       "Omnibus:                       17.470   Durbin-Watson:                   0.224\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               20.601\n",
       "Skew:                           0.961   Prob(JB):                     3.36e-05\n",
       "Kurtosis:                       3.225   Cond. No.                         24.0\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 462,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = dfUSA['Benchmark 2y']\n",
    "X = dfUSA[['UNR', 'CPI']]\n",
    "X = X.astype('float64')\n",
    "Y = Y.astype('float64')\n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(Y,X)\n",
    "resultsUSA2 = model.fit()\n",
    "resultsUSA2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "eb6d95dc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 463,
   "id": "1ccd6385",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 2.41892465, -0.25193117, -0.02338696])"
      ]
     },
     "execution_count": 463,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_OLS_results['est_betas']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 479,
   "id": "8e573ba9",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>3.3743</td>\n",
       "      <td>0.088932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>3.4217</td>\n",
       "      <td>0.102431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>3.4703</td>\n",
       "      <td>0.088399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>3.2900</td>\n",
       "      <td>0.051513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>3.0589</td>\n",
       "      <td>0.067351</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 10y  Prediction\n",
       "Date                                 \n",
       "2011-01-31         3.3743    0.088932\n",
       "2011-02-28         3.4217    0.102431\n",
       "2011-03-31         3.4703    0.088399\n",
       "2011-04-30         3.2900    0.051513\n",
       "2011-05-31         3.0589    0.067351"
      ]
     },
     "execution_count": 479,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressionUSA2 = pd.DataFrame(Y)\n",
    "\n",
    "prediction = resultsUSA2.predict()\n",
    "\n",
    "regressionUSA2['Prediction']=prediction\n",
    "regressionUSA2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 480,
   "id": "f683c119",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 480,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(regressionUSA2)\n",
    "labels=['Observed','Prediction']\n",
    "plt.legend(labels)\n",
    "plt.title('Observed vs. Predicted Inflation')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f79e8d1a",
   "metadata": {},
   "source": [
    "### Heteroskedasticity USA 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 481,
   "id": "ea5c9a6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 481,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "residualsUSA2 = Y - prediction\n",
    "plt.plot(residualsUSA2)\n",
    "plt.title('Residuals USA 2Y')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 483,
   "id": "feab599b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Jarque-Bera', 11.81435200112074),\n",
       " ('JB P-value', 0.0027198569266327),\n",
       " ('Skew', 0.607011890808813),\n",
       " ('Kurtosis', 3.821103073840678)]"
      ]
     },
     "execution_count": 483,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normality of the residuals\n",
    "\n",
    "residualsUSA2 = Y - prediction\n",
    "xs_with_constant = sm.add_constant(X)\n",
    "\n",
    "name = ['Jarque-Bera', 'JB P-value', 'Skew', 'Kurtosis']\n",
    "test = sms.jarque_bera(residualsUSA2)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "id": "135b866b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Lagrange multiplier statistic', 37.310940188024816),\n",
       " ('p-value', 7.90737400872131e-09),\n",
       " ('f-value', 25.41535048406138),\n",
       " ('f p-value', 4.946736976958537e-10)]"
      ]
     },
     "execution_count": 485,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Breush Pagan Test for Heteroskedastic residuals\n",
    "\n",
    "name = ['Lagrange multiplier statistic', 'p-value',\n",
    "        'f-value', 'f p-value']\n",
    "\n",
    "test = sms.het_breuschpagan(residualsUSA2, results.model.exog)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c97aed7f",
   "metadata": {},
   "source": [
    "### Autocorrelation USA 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "id": "274219ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Durbin Watson Test Statistics 0.04595067190102669\n"
     ]
    }
   ],
   "source": [
    "#JB Test for Normal Distribution of Residuals\n",
    "dw_pvalue1=sm.stats.stattools.durbin_watson(residualsUSA2)\n",
    "print(\"\\n\",\"Durbin Watson Test Statistics\", dw_pvalue1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "788edf27",
   "metadata": {},
   "source": [
    "### Multicollinearity USA 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 487,
   "id": "f218db96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.679587</td>\n",
       "      <td>0.014536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNR</th>\n",
       "      <td>-0.679587</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.080336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CPI</th>\n",
       "      <td>0.014536</td>\n",
       "      <td>-0.080336</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Benchmark 2y       UNR       CPI\n",
       "Benchmark 2y      1.000000 -0.679587  0.014536\n",
       "UNR              -0.679587  1.000000 -0.080336\n",
       "CPI               0.014536 -0.080336  1.000000"
      ]
     },
     "execution_count": 487,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = dfUSA[['Benchmark 2y','UNR', 'CPI', ]].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 488,
   "id": "46eb8355",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 488,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 489,
   "id": "e50df32f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_2ffde_row0_col0, #T_2ffde_row1_col1, #T_2ffde_row2_col2 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_2ffde_row0_col1, #T_2ffde_row1_col0, #T_2ffde_row1_col2 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_2ffde_row0_col2 {\n",
       "  background-color: #5572df;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_2ffde_row2_col0 {\n",
       "  background-color: #c4d5f3;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_2ffde_row2_col1 {\n",
       "  background-color: #b2ccfb;\n",
       "  color: #000000;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_2ffde_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Benchmark 2y</th>\n",
       "      <th class=\"col_heading level0 col1\" >UNR</th>\n",
       "      <th class=\"col_heading level0 col2\" >CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_2ffde_level0_row0\" class=\"row_heading level0 row0\" >Benchmark 2y</th>\n",
       "      <td id=\"T_2ffde_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_2ffde_row0_col1\" class=\"data row0 col1\" >-0.679587</td>\n",
       "      <td id=\"T_2ffde_row0_col2\" class=\"data row0 col2\" >0.014536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2ffde_level0_row1\" class=\"row_heading level0 row1\" >UNR</th>\n",
       "      <td id=\"T_2ffde_row1_col0\" class=\"data row1 col0\" >-0.679587</td>\n",
       "      <td id=\"T_2ffde_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_2ffde_row1_col2\" class=\"data row1 col2\" >-0.080336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2ffde_level0_row2\" class=\"row_heading level0 row2\" >CPI</th>\n",
       "      <td id=\"T_2ffde_row2_col0\" class=\"data row2 col0\" >0.014536</td>\n",
       "      <td id=\"T_2ffde_row2_col1\" class=\"data row2 col1\" >-0.080336</td>\n",
       "      <td id=\"T_2ffde_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fdf6a8248e0>"
      ]
     },
     "execution_count": 489,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a2acc4c",
   "metadata": {},
   "source": [
    "### Regression USA 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 738,
   "id": "1a13faf0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 10y</td>  <th>  R-squared:         </th> <td>   0.045</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.030</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   3.056</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 03 May 2022</td> <th>  Prob (F-statistic):</th>  <td>0.0505</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>09:19:00</td>     <th>  Log-Likelihood:    </th> <td> -126.28</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>   258.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>   267.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>    2.4279</td> <td>    0.197</td> <td>   12.353</td> <td> 0.000</td> <td>    2.039</td> <td>    2.817</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>   -0.0646</td> <td>    0.027</td> <td>   -2.401</td> <td> 0.018</td> <td>   -0.118</td> <td>   -0.011</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>    0.0167</td> <td>    0.042</td> <td>    0.394</td> <td> 0.694</td> <td>   -0.067</td> <td>    0.100</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 0.100</td> <th>  Durbin-Watson:     </th> <td>   0.108</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.951</td> <th>  Jarque-Bera (JB):  </th> <td>   0.231</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.051</td> <th>  Prob(JB):          </th> <td>   0.891</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.822</td> <th>  Cond. No.          </th> <td>    24.0</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Benchmark 10y   R-squared:                       0.045\n",
       "Model:                            OLS   Adj. R-squared:                  0.030\n",
       "Method:                 Least Squares   F-statistic:                     3.056\n",
       "Date:                Tue, 03 May 2022   Prob (F-statistic):             0.0505\n",
       "Time:                        09:19:00   Log-Likelihood:                -126.28\n",
       "No. Observations:                 132   AIC:                             258.6\n",
       "Df Residuals:                     129   BIC:                             267.2\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const          2.4279      0.197     12.353      0.000       2.039       2.817\n",
       "UNR           -0.0646      0.027     -2.401      0.018      -0.118      -0.011\n",
       "CPI            0.0167      0.042      0.394      0.694      -0.067       0.100\n",
       "==============================================================================\n",
       "Omnibus:                        0.100   Durbin-Watson:                   0.108\n",
       "Prob(Omnibus):                  0.951   Jarque-Bera (JB):                0.231\n",
       "Skew:                           0.051   Prob(JB):                        0.891\n",
       "Kurtosis:                       2.822   Cond. No.                         24.0\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 738,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = dfUSA['Benchmark 10y']\n",
    "X = dfUSA[['UNR','CPI']]\n",
    "X = X.astype('float64')\n",
    "Y = Y.astype('float64')\n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(Y,X)\n",
    "resultsUSA10 = model.fit()\n",
    "resultsUSA10.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 739,
   "id": "aca63e69",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>3.3743</td>\n",
       "      <td>1.866296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>3.4217</td>\n",
       "      <td>1.881102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>3.4703</td>\n",
       "      <td>1.891112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>3.2900</td>\n",
       "      <td>1.892989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>3.0589</td>\n",
       "      <td>1.906127</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 10y  Prediction\n",
       "Date                                 \n",
       "2011-01-31         3.3743    1.866296\n",
       "2011-02-28         3.4217    1.881102\n",
       "2011-03-31         3.4703    1.891112\n",
       "2011-04-30         3.2900    1.892989\n",
       "2011-05-31         3.0589    1.906127"
      ]
     },
     "execution_count": 739,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressionUSA10 = pd.DataFrame(Y)\n",
    "\n",
    "prediction = resultsUSA10.predict()\n",
    "\n",
    "regressionUSA10['Prediction']=prediction\n",
    "regressionUSA10.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 740,
   "id": "7e5fb58a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 740,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(regressionUSA10)\n",
    "labels=['Observed','Prediction']\n",
    "plt.legend(labels)\n",
    "plt.title('Observed vs. Predicted Inflation')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0c9e016",
   "metadata": {},
   "source": [
    "### Heteroskedasticity USA 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 741,
   "id": "84c0e15f",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 741,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "residualsUSA10 = Y - prediction\n",
    "plt.plot(residualsUSA10)\n",
    "plt.title('Residuals USA 10Y')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 743,
   "id": "8d581ec2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Jarque-Bera', 0.2306490033655159),\n",
       " ('JB P-value', 0.8910769410191298),\n",
       " ('Skew', 0.050841787190199925),\n",
       " ('Kurtosis', 2.822245581963993)]"
      ]
     },
     "execution_count": 743,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normality of the residuals\n",
    "\n",
    "residualsUSA10 = Y - prediction\n",
    "xs_with_constant = sm.add_constant(X)\n",
    "\n",
    "name = ['Jarque-Bera', 'JB P-value', 'Skew', 'Kurtosis']\n",
    "test = sms.jarque_bera(residualsUSA10)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 744,
   "id": "22968d14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Lagrange multiplier statistic', 17.353022525879695),\n",
       " ('p-value', 0.00017054501765232632),\n",
       " ('f-value', 9.762751514071946),\n",
       " ('f p-value', 0.00011268594603956614)]"
      ]
     },
     "execution_count": 744,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Breush Pagan Test for Heteroskedastic residuals\n",
    "\n",
    "name = ['Lagrange multiplier statistic', 'p-value',\n",
    "        'f-value', 'f p-value']\n",
    "\n",
    "test = sms.het_breuschpagan(residualsUSA10, results.model.exog)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56c1e3a0",
   "metadata": {},
   "source": [
    "### Autocorrelation USA 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 496,
   "id": "2e2d907f",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Durbin Watson Test Statistics 0.10848429860584817\n"
     ]
    }
   ],
   "source": [
    "#JB Test for Normal Distribution of Residuals\n",
    "dw_pvalue1=sm.stats.stattools.durbin_watson(residualsUSA10)\n",
    "print(\"\\n\",\"Durbin Watson Test Statistics\", dw_pvalue1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d39cd7eb",
   "metadata": {},
   "source": [
    "### Multicollinearity USA 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 497,
   "id": "4ceacec3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.209978</td>\n",
       "      <td>0.050670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNR</th>\n",
       "      <td>-0.209978</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.080336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CPI</th>\n",
       "      <td>0.050670</td>\n",
       "      <td>-0.080336</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Benchmark 10y       UNR       CPI\n",
       "Benchmark 10y       1.000000 -0.209978  0.050670\n",
       "UNR                -0.209978  1.000000 -0.080336\n",
       "CPI                 0.050670 -0.080336  1.000000"
      ]
     },
     "execution_count": 497,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = dfUSA[['Benchmark 10y','UNR', 'CPI', ]].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 498,
   "id": "7f613cec",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 498,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 499,
   "id": "7bbddfee",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_ff604_row0_col0, #T_ff604_row1_col1, #T_ff604_row2_col2 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_ff604_row0_col1, #T_ff604_row1_col0, #T_ff604_row1_col2 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_ff604_row0_col2 {\n",
       "  background-color: #6180e9;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_ff604_row2_col0 {\n",
       "  background-color: #81a4fb;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_ff604_row2_col1 {\n",
       "  background-color: #5b7ae5;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_ff604_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Benchmark 10y</th>\n",
       "      <th class=\"col_heading level0 col1\" >UNR</th>\n",
       "      <th class=\"col_heading level0 col2\" >CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_ff604_level0_row0\" class=\"row_heading level0 row0\" >Benchmark 10y</th>\n",
       "      <td id=\"T_ff604_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_ff604_row0_col1\" class=\"data row0 col1\" >-0.209978</td>\n",
       "      <td id=\"T_ff604_row0_col2\" class=\"data row0 col2\" >0.050670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_ff604_level0_row1\" class=\"row_heading level0 row1\" >UNR</th>\n",
       "      <td id=\"T_ff604_row1_col0\" class=\"data row1 col0\" >-0.209978</td>\n",
       "      <td id=\"T_ff604_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_ff604_row1_col2\" class=\"data row1 col2\" >-0.080336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_ff604_level0_row2\" class=\"row_heading level0 row2\" >CPI</th>\n",
       "      <td id=\"T_ff604_row2_col0\" class=\"data row2 col0\" >0.050670</td>\n",
       "      <td id=\"T_ff604_row2_col1\" class=\"data row2 col1\" >-0.080336</td>\n",
       "      <td id=\"T_ff604_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fdf497f8490>"
      ]
     },
     "execution_count": 499,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "892bed89",
   "metadata": {},
   "source": [
    "# Analysis Japan"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f042e3ca",
   "metadata": {},
   "source": [
    "### Regression Japan 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 500,
   "id": "ebc60d20",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 2y</td>   <th>  R-squared:         </th> <td>   0.826</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.823</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   305.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 02 May 2022</td> <th>  Prob (F-statistic):</th> <td>1.11e-49</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:35:49</td>     <th>  Log-Likelihood:    </th> <td>  188.81</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>  -371.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>  -363.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>   -0.6262</td> <td>    0.024</td> <td>  -26.091</td> <td> 0.000</td> <td>   -0.674</td> <td>   -0.579</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>    0.1718</td> <td>    0.007</td> <td>   24.494</td> <td> 0.000</td> <td>    0.158</td> <td>    0.186</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>    0.0304</td> <td>    0.005</td> <td>    5.870</td> <td> 0.000</td> <td>    0.020</td> <td>    0.041</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>26.857</td> <th>  Durbin-Watson:     </th> <td>   0.477</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  35.889</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-1.136</td> <th>  Prob(JB):          </th> <td>1.61e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.167</td> <th>  Cond. No.          </th> <td>    17.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:           Benchmark 2y   R-squared:                       0.826\n",
       "Model:                            OLS   Adj. R-squared:                  0.823\n",
       "Method:                 Least Squares   F-statistic:                     305.8\n",
       "Date:                Mon, 02 May 2022   Prob (F-statistic):           1.11e-49\n",
       "Time:                        20:35:49   Log-Likelihood:                 188.81\n",
       "No. Observations:                 132   AIC:                            -371.6\n",
       "Df Residuals:                     129   BIC:                            -363.0\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         -0.6262      0.024    -26.091      0.000      -0.674      -0.579\n",
       "UNR            0.1718      0.007     24.494      0.000       0.158       0.186\n",
       "CPI            0.0304      0.005      5.870      0.000       0.020       0.041\n",
       "==============================================================================\n",
       "Omnibus:                       26.857   Durbin-Watson:                   0.477\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               35.889\n",
       "Skew:                          -1.136   Prob(JB):                     1.61e-08\n",
       "Kurtosis:                       4.167   Cond. No.                         17.3\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 500,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = dfJapan['Benchmark 2y']\n",
    "X = dfJapan[['UNR', 'CPI']]\n",
    "X = X.astype('float64')\n",
    "Y = Y.astype('float64')\n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(Y,X)\n",
    "resultsJapan2 = model.fit()\n",
    "resultsJapan2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 501,
   "id": "1904c57e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>0.200</td>\n",
       "      <td>0.180340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>0.245</td>\n",
       "      <td>0.166200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>0.215</td>\n",
       "      <td>0.166200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>0.200</td>\n",
       "      <td>0.169242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>0.180</td>\n",
       "      <td>0.152060</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 2y  Prediction\n",
       "Date                                \n",
       "2011-01-31         0.200    0.180340\n",
       "2011-02-28         0.245    0.166200\n",
       "2011-03-31         0.215    0.166200\n",
       "2011-04-30         0.200    0.169242\n",
       "2011-05-31         0.180    0.152060"
      ]
     },
     "execution_count": 501,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressionJapan2 = pd.DataFrame(Y)\n",
    "\n",
    "prediction = resultsJapan2.predict()\n",
    "\n",
    "regressionJapan2['Prediction']=prediction\n",
    "regressionJapan2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 502,
   "id": "9eb91eac",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 502,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(regressionJapan2)\n",
    "labels=['Observed','Prediction']\n",
    "plt.legend(labels)\n",
    "plt.title('Observed vs. Predicted Inflation')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "911cc0eb",
   "metadata": {},
   "source": [
    "### Heteroskedasticity Japan 2y\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 503,
   "id": "922fc8a0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 503,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "residualsJapan2y = Y - prediction\n",
    "plt.plot(residualsJapan2y)\n",
    "plt.title('Residuals Japan 2Y')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 505,
   "id": "8ee9b5d0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Jarque-Bera', 35.88925637266744),\n",
       " ('JB P-value', 1.6097076161342465e-08),\n",
       " ('Skew', -1.1360921387076037),\n",
       " ('Kurtosis', 4.167260874848515)]"
      ]
     },
     "execution_count": 505,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normality of the residuals\n",
    "\n",
    "residualsJapan2y = Y - prediction\n",
    "xs_with_constant = sm.add_constant(X)\n",
    "\n",
    "name = ['Jarque-Bera', 'JB P-value', 'Skew', 'Kurtosis']\n",
    "test = sms.jarque_bera(residualsJapan2y)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 746,
   "id": "aaef0505",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Lagrange multiplier statistic', 10.642166202146125),\n",
       " ('p-value', 0.004887457247257711),\n",
       " ('f-value', 5.656163253389943),\n",
       " ('f p-value', 0.004419321096590071)]"
      ]
     },
     "execution_count": 746,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Breush Pagan Test for Heteroskedastic residuals\n",
    "\n",
    "name = ['Lagrange multiplier statistic', 'p-value',\n",
    "        'f-value', 'f p-value']\n",
    "\n",
    "test = sms.het_breuschpagan(residualsJapan2y, results.model.exog)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bdfad7c",
   "metadata": {},
   "source": [
    "### Autocorrelation Japan 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 506,
   "id": "671b6527",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Durbin Watson Test Statistics 0.4767150354672656\n"
     ]
    }
   ],
   "source": [
    "#JB Test for Normal Distribution of Residuals\n",
    "dw_pvalue1=sm.stats.stattools.durbin_watson(residualsJapan2y)\n",
    "print(\"\\n\",\"Durbin Watson Test Statistics\", dw_pvalue1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4674726",
   "metadata": {},
   "source": [
    "### Multicollinearity Japan 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 507,
   "id": "fba1ab27",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.882772</td>\n",
       "      <td>0.125342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNR</th>\n",
       "      <td>0.882772</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.101103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CPI</th>\n",
       "      <td>0.125342</td>\n",
       "      <td>-0.101103</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Benchmark 2y       UNR       CPI\n",
       "Benchmark 2y      1.000000  0.882772  0.125342\n",
       "UNR               0.882772  1.000000 -0.101103\n",
       "CPI               0.125342 -0.101103  1.000000"
      ]
     },
     "execution_count": 507,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = dfJapan[['Benchmark 2y','UNR', 'CPI', ]].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 508,
   "id": "08fb410b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 508,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 509,
   "id": "08bb8bbc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_8e6cc_row0_col0, #T_8e6cc_row1_col1, #T_8e6cc_row2_col2 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_8e6cc_row0_col1 {\n",
       "  background-color: #d85646;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_8e6cc_row0_col2 {\n",
       "  background-color: #7da0f9;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_8e6cc_row1_col0 {\n",
       "  background-color: #e0654f;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_8e6cc_row1_col2, #T_8e6cc_row2_col0, #T_8e6cc_row2_col1 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_8e6cc_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Benchmark 2y</th>\n",
       "      <th class=\"col_heading level0 col1\" >UNR</th>\n",
       "      <th class=\"col_heading level0 col2\" >CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_8e6cc_level0_row0\" class=\"row_heading level0 row0\" >Benchmark 2y</th>\n",
       "      <td id=\"T_8e6cc_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_8e6cc_row0_col1\" class=\"data row0 col1\" >0.882772</td>\n",
       "      <td id=\"T_8e6cc_row0_col2\" class=\"data row0 col2\" >0.125342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8e6cc_level0_row1\" class=\"row_heading level0 row1\" >UNR</th>\n",
       "      <td id=\"T_8e6cc_row1_col0\" class=\"data row1 col0\" >0.882772</td>\n",
       "      <td id=\"T_8e6cc_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_8e6cc_row1_col2\" class=\"data row1 col2\" >-0.101103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8e6cc_level0_row2\" class=\"row_heading level0 row2\" >CPI</th>\n",
       "      <td id=\"T_8e6cc_row2_col0\" class=\"data row2 col0\" >0.125342</td>\n",
       "      <td id=\"T_8e6cc_row2_col1\" class=\"data row2 col1\" >-0.101103</td>\n",
       "      <td id=\"T_8e6cc_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fdf6a621310>"
      ]
     },
     "execution_count": 509,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c0af125",
   "metadata": {},
   "source": [
    "## Regression Japan 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 510,
   "id": "e2d0577d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 10y</td>  <th>  R-squared:         </th> <td>   0.892</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.890</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   530.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 02 May 2022</td> <th>  Prob (F-statistic):</th> <td>5.68e-63</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:36:18</td>     <th>  Log-Likelihood:    </th> <td>  78.858</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>  -151.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>  -143.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>   -1.4231</td> <td>    0.055</td> <td>  -25.779</td> <td> 0.000</td> <td>   -1.532</td> <td>   -1.314</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>    0.5256</td> <td>    0.016</td> <td>   32.577</td> <td> 0.000</td> <td>    0.494</td> <td>    0.558</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>    0.0408</td> <td>    0.012</td> <td>    3.421</td> <td> 0.001</td> <td>    0.017</td> <td>    0.064</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 7.237</td> <th>  Durbin-Watson:     </th> <td>   0.384</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.027</td> <th>  Jarque-Bera (JB):  </th> <td>   6.836</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.513</td> <th>  Prob(JB):          </th> <td>  0.0328</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.438</td> <th>  Cond. No.          </th> <td>    17.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Benchmark 10y   R-squared:                       0.892\n",
       "Model:                            OLS   Adj. R-squared:                  0.890\n",
       "Method:                 Least Squares   F-statistic:                     530.6\n",
       "Date:                Mon, 02 May 2022   Prob (F-statistic):           5.68e-63\n",
       "Time:                        20:36:18   Log-Likelihood:                 78.858\n",
       "No. Observations:                 132   AIC:                            -151.7\n",
       "Df Residuals:                     129   BIC:                            -143.1\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         -1.4231      0.055    -25.779      0.000      -1.532      -1.314\n",
       "UNR            0.5256      0.016     32.577      0.000       0.494       0.558\n",
       "CPI            0.0408      0.012      3.421      0.001       0.017       0.064\n",
       "==============================================================================\n",
       "Omnibus:                        7.237   Durbin-Watson:                   0.384\n",
       "Prob(Omnibus):                  0.027   Jarque-Bera (JB):                6.836\n",
       "Skew:                          -0.513   Prob(JB):                       0.0328\n",
       "Kurtosis:                       3.438   Cond. No.                         17.3\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 510,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = dfJapan['Benchmark 10y']\n",
    "X = dfJapan[['UNR', 'CPI']]\n",
    "X = X.astype('float64')\n",
    "Y = Y.astype('float64')\n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(Y,X)\n",
    "resultsJapan10 = model.fit()\n",
    "resultsJapan10.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "id": "906fde8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>1.215</td>\n",
       "      <td>1.075557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>1.259</td>\n",
       "      <td>1.027070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>1.255</td>\n",
       "      <td>1.027070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>1.206</td>\n",
       "      <td>1.031148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>1.155</td>\n",
       "      <td>0.978584</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 10y  Prediction\n",
       "Date                                 \n",
       "2011-01-31          1.215    1.075557\n",
       "2011-02-28          1.259    1.027070\n",
       "2011-03-31          1.255    1.027070\n",
       "2011-04-30          1.206    1.031148\n",
       "2011-05-31          1.155    0.978584"
      ]
     },
     "execution_count": 511,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressionJapan10 = pd.DataFrame(Y)\n",
    "\n",
    "prediction = resultsJapan10.predict()\n",
    "\n",
    "regressionJapan10['Prediction']=prediction\n",
    "regressionJapan10.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 512,
   "id": "d2d4137d",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 512,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(regressionJapan10)\n",
    "labels=['Observed','Prediction']\n",
    "plt.legend(labels)\n",
    "plt.title('Observed vs. Predicted Inflation')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "376e5bcb",
   "metadata": {},
   "source": [
    "### Heteroskedasticity Japan 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "id": "4fbf7d27",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 513,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "residualsJapan10y = Y - prediction\n",
    "plt.plot(residualsJapan10y)\n",
    "plt.title('Residuals Japan 10Y')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "id": "a4a1adb8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Jarque-Bera', 6.836064648684554),\n",
       " ('JB P-value', 0.03277686576965436),\n",
       " ('Skew', -0.5126906741936246),\n",
       " ('Kurtosis', 3.4376230519464444)]"
      ]
     },
     "execution_count": 515,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normality of the residuals\n",
    "\n",
    "residualsJapan10y = Y - prediction\n",
    "xs_with_constant = sm.add_constant(X)\n",
    "\n",
    "name = ['Jarque-Bera', 'JB P-value', 'Skew', 'Kurtosis']\n",
    "test = sms.jarque_bera(residualsJapan10y)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 747,
   "id": "4fecff79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Lagrange multiplier statistic', 4.637147535921991),\n",
       " ('p-value', 0.09841384653928209),\n",
       " ('f-value', 2.348377178120496),\n",
       " ('f p-value', 0.09959569379292087)]"
      ]
     },
     "execution_count": 747,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Breush Pagan Test for Heteroskedastic residuals\n",
    "\n",
    "name = ['Lagrange multiplier statistic', 'p-value',\n",
    "        'f-value', 'f p-value']\n",
    "\n",
    "test = sms.het_breuschpagan(residualsJapan10y, results.model.exog)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73e526ce",
   "metadata": {},
   "source": [
    "### Autocorrelation Japan 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "id": "bada1684",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Durbin Watson Test Statistics 0.38414253639862234\n"
     ]
    }
   ],
   "source": [
    "#JB Test for Normal Distribution of Residuals\n",
    "dw_pvalue1=sm.stats.stattools.durbin_watson(residualsJapan10y)\n",
    "print(\"\\n\",\"Durbin Watson Test Statistics\", dw_pvalue1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50bd7da1",
   "metadata": {},
   "source": [
    "### Multicollinearity Japan 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "id": "5c58397a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.939036</td>\n",
       "      <td>0.003707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNR</th>\n",
       "      <td>0.939036</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.101103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CPI</th>\n",
       "      <td>0.003707</td>\n",
       "      <td>-0.101103</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Benchmark 10y       UNR       CPI\n",
       "Benchmark 10y       1.000000  0.939036  0.003707\n",
       "UNR                 0.939036  1.000000 -0.101103\n",
       "CPI                 0.003707 -0.101103  1.000000"
      ]
     },
     "execution_count": 518,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = dfJapan[['Benchmark 10y','UNR', 'CPI', ]].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "id": "96f34d20",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 519,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAAD8CAYAAADUv3dIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAX4klEQVR4nO3df7RcZX3v8feH8LtQKYLRm1BDMYqKCSgiVUsFFxqsEll1ebm6RMUaWZXbW+/Cit5eW3Vdq6vt0sUSG1OKlJbK1V6sESMI8kMUkASbJiSIhMTAkSA/BcsP4Zz53D9mH5wczpnZc87Mnj2Tz4u115nZ+5lnvmdy+J7nfPezny3bRERENXYbdAAREbuSJN2IiAol6UZEVChJNyKiQkm6EREVStKNiKhQkm5ExAwknS/pXkm3zHBcks6RtEXSBkkv79Rnkm5ExMwuAJa1OX4SsLjYVgB/16nDjklX0hElg4uIGCm2vwc82KbJcuBCN90IHCDpee363L3E+66UtCfNjP8vtn9RMl4Anrp/ay5567PGfdsHHcIu4Yjjzhp0CCPv9vtu1lz76Cbn7HnwYR+gOUKdtMr2qi7ebgFwV8vzsWLfjple0DHp2n6tpMXA6cA6STcBX7Z9RReBRURUozFRummRYLtJslNN90uibdIvM9LF9u2S/hxYB5wDHCVJwMdsX9J1mBER/eJGle82BhzS8nwhcHe7F5Sp6S6R9DngVuAE4C22X1w8/tzsY42I6INGo/w2d6uB04pZDMcCD9uesbQA5Ua6XwDOozmqfXxyp+27i9FvRERtuIcjXUlfAV4HHCRpDPgLYI/m+3glsAZ4E7AFeAx4b6c+y9R0j2tz7J/KBB4RUZmJ8Z51Zfu/dThu4IPd9DljeUHSsyR9RtKtkh4otluLfQd08yYREZVpTJTfBqBdTferwEPA8bafbfvZwPHFvq9VEVxERNfcKL8NQLuku8j2Z23fM7nD9j22Pwv8dv9Di4iYhWpPpHWtXdLdLunPJM2f3CFpvqSPsPNk4IiI2rAbpbdBaJd0/yvwbOBaSQ9KehC4BjgQeHsFsUVEdK/mI90ZZy/Yfgj4SLFFRAyHiacGHUFbs1plTFLHuWgREQMxxCfS2vlET6OIiOiVYS0vSNow0yFg/gzHIiIGa0Aj2LLaXZE2H3gjzXm5rQRc37eIIiLmYkAj2LLaJd1Lgf1sr596QNI1/QooImIu3Kj3ibR2sxfe1+bYO/oTTkTEHA3xSDciYvgMcU03ImL4DGghm7KSdCNitNR8pFvmzhEnTbPvjP6EExExRzWfp1vm4oj/LemEySfFgjfL+xdSRMQcTIyX3wagTHnhZOBSSR8GlgGHF/siIupn2Gcv2L5f0snAlcDNwNuKW1RERNSOPaQn0iT9kp3v374n8DvA2yTZ9m/2O7iIiK4N60jX9v6SBBxi+84KY4qImL1hnr1QlBG+XlEsERFzV/PZC2VOpN0o6ZW21/Y9moiIuRrQrISyyiTd44EPSNoOPEpzlTHbXtLXyCIiZqPm5YUySfcZF0dERNTWsJ5Im2R7O4Ck5wB79z2iiIi5qHnSLXMZ8MmSbge2AdcCPwW+3ee4IiJmZwTukfYp4FjgJ7YPBV4P/KCvUUVEzFbNLwMuk3Sfsv0AsJuk3WxfDRzZ37AiImZpBKaM/ULSfsD3gIsk3QvUe05GROy6aj57ocxIdznwOPAh4DLgDuAt/QwqImLWaj7S7Zh0bT/q5goS+wLfBP6ZnddkeAZJKyStk7TuvAu/0ptIIyLK6GHSlbRM0m2Stkg6e5rjz5L0TUn/IWmTpPd26rNjeUHSB4BP0hztNigujqC5+M20bK8CVgE8df/WrEgWEdXp0SKIkuYB5wInAmPAWkmrbW9uafZBYLPtt0g6GLhN0kW2n5yp3zI13bOAl9q+fw7xR0RUY7xnp5yOAbbY3gog6WKa5dbWpGtgcnGw/YAH6XDOq0xN9w7gsdlEHBFRuS7m6baWQottRUtPC4C7Wp6PFftafQF4MXA3sBH4H3b7M3llRrofBa6X9EPgV09/X/aflHhtRES1ujhB1loKnYame8mU528E1gMnAIcBV0i6zvYjM71nmaT7JeAqmlm83nMxIiJ6d2ObMeCQlucLaY5oW70X+EyxDO4WSdto3tLsppk6LZN0x23/zy6DjYgYjN5NBVsLLJZ0KPAz4FTgHVPa3EnzKt3rJM0HXgRsbddpmaR7dVHn+CY7lxceLB97RERFepR0bY9LOhO4HJgHnG97k6QziuMraS6TcIGkjTTLER/pNOmgTNKdzOwfbY2HNlPGIiIGxRO9uzGl7TXAmin7VrY8vht4Qzd9llna8dBuOoyIGKiaL+1YZqSLpFcDi1rb276wTzFFRMxezddeKHNF2j/RnAqxHpgctxtI0o2I+mnU+yLYMiPdo4GXFFMiIiLqbQTKC7cAzwV29DmWiIi56+GJtH6YMelK+ibFdcXAZkk3sfOUsZP7H15ERJeGeKT7N5VFERHRK8Na07V9LUBxNcYO208Uz/cB5lcTXkREl2o+e6HMKmNfY+c1FyaKfRER9dNw+W0AypxI2711QV7bT0ras48xRUTMmmte0y0z0r1P0tMnzSQtB7KgeUTU08RE+W0Ayox0z6B5F+Av0FzQ4S7gtL5GFRExW8N6Im2S7TuAY4vbsMv2L/sfVkTELNW8vFDmMuC9gD+kWHuheSsgsP3JvkYWETEbwz7SBb4BPAzcTMvFERERtVTzKWNlku5C28v6HklERC+MwEj3ekkvs72x79FERMyRx4d07YUWrwXeU9xw7Vc0ZzDY9pK+RhYRMRsjMNI9qe9RRET0Ss1ruh0vjrC9neZtiE8oHj9W5nUREQMx7JcBS/oLmguZvwj4MrAH8M/Aa/obWkRE9zwC5YVTgKOAH0Hz7peS9u9rVBERszUCJ9KetG1JBpD0G32OKSJi9mo+0i1Tm/2qpC8BB0h6P3Al8Pf9DSsiYpaGvaZr+28knQg8QrOu+3HbV/Q9soiIWaj7PXTLlBcokuwVkg4CHuhvSBERczCs5QVJx0q6RtIlko6SdAvNOwP/XFIuC46Iehri8sIXgI8BzwKuAk6yfaOkw4GvAJeVeYPGfdvnHGS0t9vBzx90CLuEbQ/fM+gQogSPD+/FEbvb/o7trwH32L4RwPaPqwktImIWGl1sA9BupNsa0uNTjtW7aBIRu6y6XxzRbqS7VNIjkn4JLCkeTz5/WUXxRUR0p4c1XUnLJN0maYuks2do8zpJ6yVtknRtpz5nHOnantcxooiIuulR2UDSPOBc4ERgDFgrabXtzS1tDgC+CCyzfaek53Tqt9SUsYiIYdHD8sIxwBbbWwEkXQwsBza3tHkHcIntOwFs39up06wWFhEjxeMuvUlaIWldy7aipasFNO9+Pmms2NfqhcBvFdNrb5bU8U7pGelGxGjporxgexWwaobDmu4lU57vDrwCeD2wD3CDpBtt/2Sm90zSjYiR0sM1zMdoriU+aSFw9zRt7rf9KPCopO8BS4EZk27KCxExWno3T3ctsFjSoZL2BE4FVk9p8w3g9yTtLmlf4FXAre06zUg3IkZKr0a6tsclnQlcDswDzre9SdIZxfGVtm+VdBmwgWYaP8/2Le36TdKNiJHi8R72Za8B1kzZt3LK878G/rpsn0m6ETFSan5fyiTdiBgtSboREVXydDO96iNJNyJGSka6EREVciMj3YiIyjQmknQjIiqT8kJERIVSXoiIqFDN78CepBsRoyUj3YiICuVEWkREhTLSjYiokHNFWkREdTJlLCKiQo2MdCMiqlP38sKsb9cj6TW9DCQiohcaEyq9DULbka6kecDbad52+DLbt0h6M/Axmne+PKr/IUZElDfssxf+gebdMG8CzpG0Hfhd4Gzb/9bn2CIiujbsNd2jgSW2G5L2Bu4HXmD7nv6HFhHRvbrXdDsl3Sft5gQM209I+kkSbkTU2bCvvXC4pA3FYwGHFc8F2PaSvkYXEdGlYS8vvLiSKCIieqQxzCfSbG+vKpCIiF6o+0i37TxdSdskbW3ZWp/f0eZ1KyStk7TuvK9e2vuoIyJmYKv0NghlZi+02o3mvN2zgH+f6UW2VwGrAH5169U1L2tHxCip+0i3U3nhAQBJuwHvAj4MrAf+wPbmvkcXEdGluo/yOl2RtgdwOvAh4PvActszlhUiIgZtojHr1Q0q0am8sA0YBz4P3AkslbR08qDtS/oXWkRE92q+smPHpHtF8XVJsUFzji40R/FJuhFRK2aIa7rALTSTa2uivQ/4vu1t/QwsImI2GjUv6nYqfuwH7F98nXx8NPBtSaf2ObaIiK41UOmtE0nLJN0maYuks9u0e6WkCUlv69Rnp9kLn5jhDQ4ErgQu7vQGERFV6lV5oVja9lzgRGAMWCtp9dSZW0W7zwKXl+l3Vqf5bD8INS+cRMQuaQKV3jo4Bthie6vtJ2kOMpdP0+6/A/8PuLdMfLNKupJOAB6azWsjIvqp0cXWevVssa1o6WoBcFfL87Fi39MkLQBOAVaWja/TPN2NPHOu8YHA3cBpZd8kIqIq3UwZa716dhrTDYWn5sPPAx+xPSGV++O/0+yFN0/zhg/YfrRU7xERFevhlLExmnfOmbSQ5oCz1dHAxUXCPQh4k6TxdnfWySpjETFSeriy41pgsaRDgZ8BpwLvaG1g+9DJx5IuAC7tdCuz3II9IkZKmalgZdgel3QmzVkJ84DzbW+SdEZxvHQdt1WSbkSMlIke9mV7DbBmyr5pk63t95TpM0k3IkZKo+QJrUFJ0o2IkVLzq4CTdCNitAz7KmMREUOl5velTNKNiNFS4vLegUrSjYiRkpFuRESFUtONiKhQZi9ERFQo5YWIiAqlvBARUaGJjHQjIqqTkW5ERIWSdCMiKpTZCxERFcrshYiICqW8EBFRoV4uYt4PSboRMVJSXoiIqFDKCxERFdrlZy8ccdxZ/X6LXd62h+8ZdAi7hMfvvm7QIUQJjZqn3Yx0I2Kk5ERaRESFUtONiKhQZi9ERFQoNd2IiArVO+Um6UbEiElNNyKiQhM1H+sm6UbESMlINyKiQnU/kbbboAOIiOgld7F1ImmZpNskbZF09jTH3ylpQ7FdL2lppz4z0o2IkdKr8oKkecC5wInAGLBW0mrbm1uabQN+3/ZDkk4CVgGvatdvkm5EjJQenkg7BthieyuApIuB5cDTSdf29S3tbwQWduo05YWIGCkNXHqTtELSupZtRUtXC4C7Wp6PFftm8j7g253iy0g3IkZKN+Nc26tolgSmM90FxdN2L+l4mkn3tZ3eM0k3IkZKD2cvjAGHtDxfCNw9tZGkJcB5wEm2H+jUacoLETFSGl1sHawFFks6VNKewKnA6tYGkn4buAR4l+2flIkvI92IGCnu0UjX9rikM4HLgXnA+bY3STqjOL4S+DjwbOCLkgDGbR/drt8k3YgYKb28DNj2GmDNlH0rWx7/EfBH3fSZpBsRIyWXAUdEVKjhel8GnKQbESOl3ik3STciRkzdF7xJ0o2IkdKr2Qv9kqQbESNlPEk3IqI6GelGRFQoU8YiIirkTBmLiKhOZi9ERFQodwOOiKhQRroRERUa6pqupI1Mf1WdANte0peoIiJmadhnL7y5kigiInpkqOfp2t4u6a3AC4CNti+vJKqIiFka6pqupC8CLwWuBz4l6Rjbn6oksoiIWZhwvQsMncoLxwFLbU9I2he4DkjSjYjaqnt5odONKZ+0PQFg+zGmvyXxM7TeS/7hJ+6fa4wREaU17NLbIHQa6R4uaUPxWMBhLc+ZafZC673kFx/8inr/2omIkVL3hNMp6S4F5gN3Tdn/fKa5/3tExKDV/URap/LC54BHbG9v3YDHimMREbXSwKW3Qeg00l1ke8PUnbbXSVrUn5AiImZv2Gcv7N3m2D69DCQioheGffbCWknvn7pT0vuAm/sTUkTE7NkuvQ1Cp5HunwJfl/ROfp1kjwb2BE7pY1wREbNS9xNpnS4D/jnwaknHA0cUu79l+6q+RxYRMQtDvcrYJNtXA1f3OZaIiDmbqPk6Y1lPNyJGyqCuNCsrSTciRkrdZy8k6UbESKn7SLfTlLGIiKHiLv7rRNIySbdJ2iLp7GmOS9I5xfENkl7eqc+MdCNipPRqpCtpHnAucCIwRvO6hdW2N7c0OwlYXGyvAv6u+DqjjHQjYqRMuFF66+AYYIvtrbafBC4Glk9psxy40E03AgdIel67TpN0I2KkdFNeaF37u9hWtHS1gJ1XWBwr9tFlm52kvBARI8VdLHjTuvb3NKa7acPU2kWZNjtJ0o2IkdLDy4DHgENani/kmeuIl2mzk5QXImKk9HDBm7XAYkmHStoTOBVYPaXNauC0YhbDscDDtne06zQj3YgYKb0a6doel3QmcDkwDzjf9iZJZxTHVwJrgDcBW2je3OG9nfpN0o2IkTLR6N3aC7bX0EysrftWtjw28MFu+kzSjYiRksuAIyIqNBJLO0ZEDIuhXsQ8ImLYZKQbEVGhXp5I64ck3YgYKSkvRERUKOWFiIgK1X0R8yTdiBgpmacbEVGhjHQjIirU6GJpx0FI0o2IkZITaRERFUrSjYioUL1TLqjuvxUGQdKK4jYe0Sf5jPsvn3E95c4R01vRuUnMUT7j/stnXENJuhERFUrSjYioUJLu9FIH6798xv2Xz7iGciItIqJCGelGRFQoSTciokIDTbqSJiStl/Qfkn4k6dU97v91ki7tZZ9t3us/S7Q5X9K9km6Zsv9ASVdIur34+lv9i7S/JC2a5vv7S0lnSbpA0s8k7VXsP0jST1te93jx87BZ0oWS9hjAtzB0JD1X0sWS7ig+uzWSXjjl81wpabfp/n2iWoMe6T5u+0jbS4GPAn814Hi6pqayn+MFwLJp9p8NfNf2YuC7xfNRNQGcPsOxO2wfCbwMWAi8vaqghpUkAV8HrrF9mO2XAB8D5vPrz3MJ8BLgrYOKM35t0Em31W8CD00+kfRhSWslbZD0iWLfIkm3Svp7SZskfUfSPsWxF0i6smXUfFjR1X6S/lXSjyVdVPyQIumnkj4t6QZJ6yS9XNLlxWjhjKLNfpK+W/S3UdLyKXF8EfgRcEhL3AcVff7B1G/Q9veAB6f53pcD/1g8/keK/zkkXSfpyJa+fyBpySw+2zr5PPAhSTNegm57ArgJWFBVUEPseOAp2ysnd9heD9zV8nwcuB54QeXRxTMMOunuU/z582PgPOBTAJLeACwGjgGOBF4h6bjiNYuBc22/FPgF8IfF/ouK/UuBVwM7iv1HAX9K8zf97wCvaXn/u2z/LnAdzVHo24BjgU8Wx58ATrH9cpo/3H87mbSBFwEX2j7K9vYi7vnAt4CP2/5WF5/DfNs7AIqvzyn2nwe8p+j7hcBetjd00W8d3Ql8H3jXTA0k7Q28CrisqqCG2BHAze0aSNoXeD2wsZKIoq1BJ93J8sLhNP/svrBIam8otn+nOZI8nGayBdhW/CaH5g/bIkn7Awtsfx3A9hO2Hyva3GR7zHYDWA8sann/1cXXjcAPbf/S9n3AE5IOAAR8WtIG4EqaI6/5xWu2276xpa89aJYG/sz2FXP5UFp8DXhzUds8neYvhrqbaQ5i6/5PAx/mmT9/h0laDzwA3DkCv2AGbfLz/AHwLdvfHnA8QY1WGbN9g6SDgINpJru/sv2l1jaSFgG/atk1AexTtJ/J1Pa7T3OsMaVdo2j3ziKeV9h+qjjps3fR5tEp7zNO85fAG4Fr28QznZ9Lep7tHZKeB9wLYPsxSVfQLD+8HTi6y34H4QFg6onAA4Ftk09sbymSwdSa7R22jyw+g2sknWx7NdHOJpp/oU1nsqYbNTLoke7TJB0OzKP5P+3lwOmS9iuOLZD0nJlea/sRYEzSW4v2exV/Us3Vs4B7i4R7PPD8Nm1NczR6uKRuT4StBt5dPH438I2WY+cB5wBrbU9XD64V2/8J7JD0emjOzKD5V8z3pzT9P8BZM/Sxg+bJxI/2MdRRcRWwl6T3T+6Q9Era/6zGAA066U7WdNcD/xd4t+0J298B/gW4QdJG4F+B/Tv09S7gT4pSwPXAc3sQ30XA0ZLW0Rz1/rhd4+IE0KnA8ZL+eOpxSV8BbgBeJGlM0vuKQ58BTpR0O3Bi8Xyyz5uBR4Av9+D7qcppwJ8X/65XAZ+wfUdrA9ubaJaOZvJvwL6Sfq9fQY4CNy8pPYXmz88dkjYBfwncPdDAYka5DLjmJP0X4Brg8KIuHRFDbNAj3WhD0mnAD4H/lYQbMRoy0o2IqFBGuhERFUrSjYioUJJuRESFknQjIiqUpBsRUaH/DxAYFIx4cDZaAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "id": "c6e6b84b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_0b928_row0_col0, #T_0b928_row1_col1, #T_0b928_row2_col2 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_0b928_row0_col1 {\n",
       "  background-color: #c83836;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_0b928_row0_col2 {\n",
       "  background-color: #5875e1;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_0b928_row1_col0 {\n",
       "  background-color: #ca3b37;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_0b928_row1_col2, #T_0b928_row2_col0, #T_0b928_row2_col1 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_0b928_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Benchmark 10y</th>\n",
       "      <th class=\"col_heading level0 col1\" >UNR</th>\n",
       "      <th class=\"col_heading level0 col2\" >CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_0b928_level0_row0\" class=\"row_heading level0 row0\" >Benchmark 10y</th>\n",
       "      <td id=\"T_0b928_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_0b928_row0_col1\" class=\"data row0 col1\" >0.939036</td>\n",
       "      <td id=\"T_0b928_row0_col2\" class=\"data row0 col2\" >0.003707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_0b928_level0_row1\" class=\"row_heading level0 row1\" >UNR</th>\n",
       "      <td id=\"T_0b928_row1_col0\" class=\"data row1 col0\" >0.939036</td>\n",
       "      <td id=\"T_0b928_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_0b928_row1_col2\" class=\"data row1 col2\" >-0.101103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_0b928_level0_row2\" class=\"row_heading level0 row2\" >CPI</th>\n",
       "      <td id=\"T_0b928_row2_col0\" class=\"data row2 col0\" >0.003707</td>\n",
       "      <td id=\"T_0b928_row2_col1\" class=\"data row2 col1\" >-0.101103</td>\n",
       "      <td id=\"T_0b928_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fdf89985250>"
      ]
     },
     "execution_count": 520,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a81b0e51",
   "metadata": {},
   "source": [
    "# Analysis Germany"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91f33715",
   "metadata": {},
   "source": [
    "## Regression Germany 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "id": "8510afab",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 2y</td>   <th>  R-squared:         </th> <td>   0.632</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.626</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   110.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 02 May 2022</td> <th>  Prob (F-statistic):</th> <td>1.06e-28</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:36:48</td>     <th>  Log-Likelihood:    </th> <td> -46.789</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>   99.58</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>   108.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>   -4.5216</td> <td>    0.288</td> <td>  -15.691</td> <td> 0.000</td> <td>   -5.092</td> <td>   -3.951</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>    0.6611</td> <td>    0.045</td> <td>   14.789</td> <td> 0.000</td> <td>    0.573</td> <td>    0.750</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>    0.1437</td> <td>    0.031</td> <td>    4.589</td> <td> 0.000</td> <td>    0.082</td> <td>    0.206</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>50.215</td> <th>  Durbin-Watson:     </th> <td>   0.145</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 118.632</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.568</td> <th>  Prob(JB):          </th> <td>1.74e-26</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 6.427</td> <th>  Cond. No.          </th> <td>    61.5</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:           Benchmark 2y   R-squared:                       0.632\n",
       "Model:                            OLS   Adj. R-squared:                  0.626\n",
       "Method:                 Least Squares   F-statistic:                     110.6\n",
       "Date:                Mon, 02 May 2022   Prob (F-statistic):           1.06e-28\n",
       "Time:                        20:36:48   Log-Likelihood:                -46.789\n",
       "No. Observations:                 132   AIC:                             99.58\n",
       "Df Residuals:                     129   BIC:                             108.2\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         -4.5216      0.288    -15.691      0.000      -5.092      -3.951\n",
       "UNR            0.6611      0.045     14.789      0.000       0.573       0.750\n",
       "CPI            0.1437      0.031      4.589      0.000       0.082       0.206\n",
       "==============================================================================\n",
       "Omnibus:                       50.215   Durbin-Watson:                   0.145\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              118.632\n",
       "Skew:                           1.568   Prob(JB):                     1.74e-26\n",
       "Kurtosis:                       6.427   Cond. No.                         61.5\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 521,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = dfGermany['Benchmark 2y']\n",
    "X = dfGermany[['UNR', 'CPI']]\n",
    "X = X.astype('float64')\n",
    "Y = Y.astype('float64')\n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(Y,X)\n",
    "resultsGermany2 = model.fit()\n",
    "resultsGermany2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "id": "7b44a536",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>1.370</td>\n",
       "      <td>0.615132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>1.525</td>\n",
       "      <td>0.577760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>1.795</td>\n",
       "      <td>0.526018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>1.774</td>\n",
       "      <td>0.445532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>1.609</td>\n",
       "      <td>0.459903</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 2y  Prediction\n",
       "Date                                \n",
       "2011-01-31         1.370    0.615132\n",
       "2011-02-28         1.525    0.577760\n",
       "2011-03-31         1.795    0.526018\n",
       "2011-04-30         1.774    0.445532\n",
       "2011-05-31         1.609    0.459903"
      ]
     },
     "execution_count": 522,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressionGermany2 = pd.DataFrame(Y)\n",
    "\n",
    "prediction = resultsGermany2.predict()\n",
    "\n",
    "regressionGermany2['Prediction']=prediction\n",
    "regressionGermany2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 523,
   "id": "d2289270",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 523,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(regressionGermany2)\n",
    "labels=['Observed','Prediction']\n",
    "plt.legend(labels)\n",
    "plt.title('Observed vs. Predicted Inflation')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45c55541",
   "metadata": {},
   "source": [
    "### Heteroskedasticity Germany 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 524,
   "id": "869f7b2a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 524,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "residualsGermany2 = Y - prediction\n",
    "plt.plot(residualsGermany2)\n",
    "plt.title('Residuals Germany 2Y')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 526,
   "id": "462dd839",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Jarque-Bera', 118.63177683375378),\n",
       " ('JB P-value', 1.7355493663897434e-26),\n",
       " ('Skew', 1.5675057689512093),\n",
       " ('Kurtosis', 6.426531282068227)]"
      ]
     },
     "execution_count": 526,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normality of the residuals\n",
    "\n",
    "residualsGermany2 = Y - prediction\n",
    "xs_with_constant = sm.add_constant(X)\n",
    "\n",
    "name = ['Jarque-Bera', 'JB P-value', 'Skew', 'Kurtosis']\n",
    "test = sms.jarque_bera(residualsGermany2)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 748,
   "id": "cbb8a3bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Lagrange multiplier statistic', 21.349979799697557),\n",
       " ('p-value', 2.3115899206599465e-05),\n",
       " ('f-value', 12.44530904366458),\n",
       " ('f p-value', 1.1424916352907946e-05)]"
      ]
     },
     "execution_count": 748,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Breush Pagan Test for Heteroskedastic residuals\n",
    "\n",
    "name = ['Lagrange multiplier statistic', 'p-value',\n",
    "        'f-value', 'f p-value']\n",
    "\n",
    "test = sms.het_breuschpagan(residualsGermany2, results.model.exog)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be760131",
   "metadata": {},
   "source": [
    "### Autocorrelation Germany 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 527,
   "id": "309d407b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Durbin Watson Test Statistics 0.1450764418033725\n"
     ]
    }
   ],
   "source": [
    "#JB Test for Normal Distribution of Residuals\n",
    "dw_pvalue1=sm.stats.stattools.durbin_watson(residualsGermany2)\n",
    "print(\"\\n\",\"Durbin Watson Test Statistics\", dw_pvalue1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "550ed708",
   "metadata": {},
   "source": [
    "### Multicollinearity Germany 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 529,
   "id": "22bb3175",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.755983</td>\n",
       "      <td>0.084212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNR</th>\n",
       "      <td>0.755983</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.206031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CPI</th>\n",
       "      <td>0.084212</td>\n",
       "      <td>-0.206031</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Benchmark 2y       UNR       CPI\n",
       "Benchmark 2y      1.000000  0.755983  0.084212\n",
       "UNR               0.755983  1.000000 -0.206031\n",
       "CPI               0.084212 -0.206031  1.000000"
      ]
     },
     "execution_count": 529,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = dfGermany[['Benchmark 2y','UNR', 'CPI', ]].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 530,
   "id": "d509a0c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 530,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 531,
   "id": "326b3ed3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_03d56_row0_col0, #T_03d56_row1_col1, #T_03d56_row2_col2 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_03d56_row0_col1 {\n",
       "  background-color: #ee8468;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_03d56_row0_col2 {\n",
       "  background-color: #89acfd;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_03d56_row1_col0 {\n",
       "  background-color: #f5a081;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_03d56_row1_col2, #T_03d56_row2_col0, #T_03d56_row2_col1 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_03d56_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Benchmark 2y</th>\n",
       "      <th class=\"col_heading level0 col1\" >UNR</th>\n",
       "      <th class=\"col_heading level0 col2\" >CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_03d56_level0_row0\" class=\"row_heading level0 row0\" >Benchmark 2y</th>\n",
       "      <td id=\"T_03d56_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_03d56_row0_col1\" class=\"data row0 col1\" >0.755983</td>\n",
       "      <td id=\"T_03d56_row0_col2\" class=\"data row0 col2\" >0.084212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_03d56_level0_row1\" class=\"row_heading level0 row1\" >UNR</th>\n",
       "      <td id=\"T_03d56_row1_col0\" class=\"data row1 col0\" >0.755983</td>\n",
       "      <td id=\"T_03d56_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_03d56_row1_col2\" class=\"data row1 col2\" >-0.206031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_03d56_level0_row2\" class=\"row_heading level0 row2\" >CPI</th>\n",
       "      <td id=\"T_03d56_row2_col0\" class=\"data row2 col0\" >0.084212</td>\n",
       "      <td id=\"T_03d56_row2_col1\" class=\"data row2 col1\" >-0.206031</td>\n",
       "      <td id=\"T_03d56_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fdf7a0e5490>"
      ]
     },
     "execution_count": 531,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d7f77e5",
   "metadata": {},
   "source": [
    "## Regression Germany 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 749,
   "id": "f7371854",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 10y</td>  <th>  R-squared:         </th> <td>   0.669</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.664</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   130.4</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 03 May 2022</td> <th>  Prob (F-statistic):</th> <td>1.04e-31</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>09:51:36</td>     <th>  Log-Likelihood:    </th> <td> -108.58</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>   223.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>   231.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>   -6.7191</td> <td>    0.460</td> <td>  -14.601</td> <td> 0.000</td> <td>   -7.630</td> <td>   -5.809</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>    1.1317</td> <td>    0.071</td> <td>   15.852</td> <td> 0.000</td> <td>    0.990</td> <td>    1.273</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>    0.3149</td> <td>    0.050</td> <td>    6.297</td> <td> 0.000</td> <td>    0.216</td> <td>    0.414</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 0.614</td> <th>  Durbin-Watson:     </th> <td>   0.155</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.736</td> <th>  Jarque-Bera (JB):  </th> <td>   0.687</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.157</td> <th>  Prob(JB):          </th> <td>   0.709</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.837</td> <th>  Cond. No.          </th> <td>    61.5</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Benchmark 10y   R-squared:                       0.669\n",
       "Model:                            OLS   Adj. R-squared:                  0.664\n",
       "Method:                 Least Squares   F-statistic:                     130.4\n",
       "Date:                Tue, 03 May 2022   Prob (F-statistic):           1.04e-31\n",
       "Time:                        09:51:36   Log-Likelihood:                -108.58\n",
       "No. Observations:                 132   AIC:                             223.2\n",
       "Df Residuals:                     129   BIC:                             231.8\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         -6.7191      0.460    -14.601      0.000      -7.630      -5.809\n",
       "UNR            1.1317      0.071     15.852      0.000       0.990       1.273\n",
       "CPI            0.3149      0.050      6.297      0.000       0.216       0.414\n",
       "==============================================================================\n",
       "Omnibus:                        0.614   Durbin-Watson:                   0.155\n",
       "Prob(Omnibus):                  0.736   Jarque-Bera (JB):                0.687\n",
       "Skew:                          -0.157   Prob(JB):                        0.709\n",
       "Kurtosis:                       2.837   Cond. No.                         61.5\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 749,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = dfGermany['Benchmark 10y']\n",
    "X = dfGermany[['UNR', 'CPI']]\n",
    "X = X.astype('float64')\n",
    "Y = Y.astype('float64')\n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(Y,X)\n",
    "resultsGermany10 = model.fit()\n",
    "resultsGermany10.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 750,
   "id": "20826e4b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>3.163</td>\n",
       "      <td>2.190479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>3.171</td>\n",
       "      <td>2.140293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>3.358</td>\n",
       "      <td>2.058617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>3.236</td>\n",
       "      <td>1.913961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>3.021</td>\n",
       "      <td>1.945451</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 10y  Prediction\n",
       "Date                                 \n",
       "2011-01-31          3.163    2.190479\n",
       "2011-02-28          3.171    2.140293\n",
       "2011-03-31          3.358    2.058617\n",
       "2011-04-30          3.236    1.913961\n",
       "2011-05-31          3.021    1.945451"
      ]
     },
     "execution_count": 750,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressionGermany10 = pd.DataFrame(Y)\n",
    "\n",
    "prediction = resultsGermany10.predict()\n",
    "\n",
    "regressionGermany10['Prediction']=prediction\n",
    "regressionGermany10.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 751,
   "id": "e646adb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 751,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(regressionGermany10)\n",
    "labels=['Observed','Prediction']\n",
    "plt.legend(labels)\n",
    "plt.title('Observed vs. Predicted Inflation')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "264fd991",
   "metadata": {},
   "source": [
    "### Heteroskedasticity Germany 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 752,
   "id": "caa60221",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 752,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "residualsGermany10 = Y - prediction\n",
    "plt.plot(residualsGermany2)\n",
    "plt.title('Residuals Germany 10Y')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 754,
   "id": "be8a4419",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Jarque-Bera', 0.6874643315759181),\n",
       " ('JB P-value', 0.7091188289001851),\n",
       " ('Skew', -0.1569558677173449),\n",
       " ('Kurtosis', 2.8373564105525015)]"
      ]
     },
     "execution_count": 754,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normality of the residuals\n",
    "\n",
    "residualsGermany10 = Y - prediction\n",
    "xs_with_constant = sm.add_constant(X)\n",
    "\n",
    "name = ['Jarque-Bera', 'JB P-value', 'Skew', 'Kurtosis']\n",
    "test = sms.jarque_bera(residualsGermany10)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 759,
   "id": "21cc99f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Lagrange multiplier statistic', 39.23265968735912),\n",
       " ('p-value', 3.0250753288346557e-09),\n",
       " ('f-value', 27.277989660008014),\n",
       " ('f p-value', 1.3181527225796581e-10)]"
      ]
     },
     "execution_count": 759,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Breush Pagan Test for Heteroskedastic residuals\n",
    "\n",
    "name = ['Lagrange multiplier statistic', 'p-value',\n",
    "        'f-value', 'f p-value']\n",
    "\n",
    "test = sms.het_breuschpagan(residualsGermany10, results.model.exog)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f74b915",
   "metadata": {},
   "source": [
    "### Autocorrelation Germany 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 755,
   "id": "3e34e567",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Durbin Watson Test Statistics 0.15476880376296465\n"
     ]
    }
   ],
   "source": [
    "#JB Test for Normal Distribution of Residuals\n",
    "dw_pvalue1=sm.stats.stattools.durbin_watson(residualsGermany10)\n",
    "print(\"\\n\",\"Durbin Watson Test Statistics\", dw_pvalue1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8d6f77f",
   "metadata": {},
   "source": [
    "### Multicollinearity Germany 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 756,
   "id": "270aa5ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.753281</td>\n",
       "      <td>0.156861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNR</th>\n",
       "      <td>0.753281</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.206031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CPI</th>\n",
       "      <td>0.156861</td>\n",
       "      <td>-0.206031</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Benchmark 10y       UNR       CPI\n",
       "Benchmark 10y       1.000000  0.753281  0.156861\n",
       "UNR                 0.753281  1.000000 -0.206031\n",
       "CPI                 0.156861 -0.206031  1.000000"
      ]
     },
     "execution_count": 756,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = dfGermany[['Benchmark 10y','UNR', 'CPI', ]].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 757,
   "id": "faae76de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 757,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 758,
   "id": "a88339df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_9e499_row0_col0, #T_9e499_row1_col1, #T_9e499_row2_col2 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_9e499_row0_col1 {\n",
       "  background-color: #ee8669;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_9e499_row0_col2 {\n",
       "  background-color: #9fbfff;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_9e499_row1_col0 {\n",
       "  background-color: #f7a98b;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_9e499_row1_col2, #T_9e499_row2_col0, #T_9e499_row2_col1 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_9e499_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Benchmark 10y</th>\n",
       "      <th class=\"col_heading level0 col1\" >UNR</th>\n",
       "      <th class=\"col_heading level0 col2\" >CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_9e499_level0_row0\" class=\"row_heading level0 row0\" >Benchmark 10y</th>\n",
       "      <td id=\"T_9e499_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_9e499_row0_col1\" class=\"data row0 col1\" >0.753281</td>\n",
       "      <td id=\"T_9e499_row0_col2\" class=\"data row0 col2\" >0.156861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_9e499_level0_row1\" class=\"row_heading level0 row1\" >UNR</th>\n",
       "      <td id=\"T_9e499_row1_col0\" class=\"data row1 col0\" >0.753281</td>\n",
       "      <td id=\"T_9e499_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_9e499_row1_col2\" class=\"data row1 col2\" >-0.206031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_9e499_level0_row2\" class=\"row_heading level0 row2\" >CPI</th>\n",
       "      <td id=\"T_9e499_row2_col0\" class=\"data row2 col0\" >0.156861</td>\n",
       "      <td id=\"T_9e499_row2_col1\" class=\"data row2 col1\" >-0.206031</td>\n",
       "      <td id=\"T_9e499_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fdf99968a90>"
      ]
     },
     "execution_count": 758,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02365168",
   "metadata": {},
   "source": [
    "# Analysis Sweden"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0919a745",
   "metadata": {},
   "source": [
    "## Regression Sweden 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 544,
   "id": "4b21df19",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 2y</td>   <th>  R-squared:         </th> <td>   0.164</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.151</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   12.69</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 02 May 2022</td> <th>  Prob (F-statistic):</th> <td>9.29e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>20:37:54</td>     <th>  Log-Likelihood:    </th> <td> -152.25</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>   310.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>   319.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>   -2.7653</td> <td>    0.573</td> <td>   -4.830</td> <td> 0.000</td> <td>   -3.898</td> <td>   -1.633</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>    0.3548</td> <td>    0.071</td> <td>    5.031</td> <td> 0.000</td> <td>    0.215</td> <td>    0.494</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>    0.1090</td> <td>    0.068</td> <td>    1.596</td> <td> 0.113</td> <td>   -0.026</td> <td>    0.244</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>14.029</td> <th>  Durbin-Watson:     </th> <td>   0.114</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.001</td> <th>  Jarque-Bera (JB):  </th> <td>  15.724</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.842</td> <th>  Prob(JB):          </th> <td>0.000385</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.145</td> <th>  Cond. No.          </th> <td>    67.6</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:           Benchmark 2y   R-squared:                       0.164\n",
       "Model:                            OLS   Adj. R-squared:                  0.151\n",
       "Method:                 Least Squares   F-statistic:                     12.69\n",
       "Date:                Mon, 02 May 2022   Prob (F-statistic):           9.29e-06\n",
       "Time:                        20:37:54   Log-Likelihood:                -152.25\n",
       "No. Observations:                 132   AIC:                             310.5\n",
       "Df Residuals:                     129   BIC:                             319.1\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         -2.7653      0.573     -4.830      0.000      -3.898      -1.633\n",
       "UNR            0.3548      0.071      5.031      0.000       0.215       0.494\n",
       "CPI            0.1090      0.068      1.596      0.113      -0.026       0.244\n",
       "==============================================================================\n",
       "Omnibus:                       14.029   Durbin-Watson:                   0.114\n",
       "Prob(Omnibus):                  0.001   Jarque-Bera (JB):               15.724\n",
       "Skew:                           0.842   Prob(JB):                     0.000385\n",
       "Kurtosis:                       3.145   Cond. No.                         67.6\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 544,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = dfSweden['Benchmark 2y']\n",
    "X = dfSweden[['UNR', 'CPI']]\n",
    "X = X.astype('float64')\n",
    "Y = Y.astype('float64')\n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(Y,X)\n",
    "resultsSweden2 = model.fit()\n",
    "resultsSweden2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 545,
   "id": "9ea25f31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>1.963</td>\n",
       "      <td>0.515216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>2.205</td>\n",
       "      <td>0.408761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>2.788</td>\n",
       "      <td>0.569698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>2.770</td>\n",
       "      <td>0.506828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>2.504</td>\n",
       "      <td>0.506828</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 2y  Prediction\n",
       "Date                                \n",
       "2011-01-31         1.963    0.515216\n",
       "2011-02-28         2.205    0.408761\n",
       "2011-03-31         2.788    0.569698\n",
       "2011-04-30         2.770    0.506828\n",
       "2011-05-31         2.504    0.506828"
      ]
     },
     "execution_count": 545,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressionSweden2 = pd.DataFrame(Y)\n",
    "\n",
    "prediction = resultsSweden2.predict()\n",
    "\n",
    "regressionSweden2['Prediction']=prediction\n",
    "regressionSweden2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 546,
   "id": "5966785b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 546,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(regressionSweden2)\n",
    "labels=['Observed','Prediction']\n",
    "plt.legend(labels)\n",
    "plt.title('Observed vs. Predicted Inflation')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecf70178",
   "metadata": {},
   "source": [
    "### Heteroskedasticity Sweden 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 547,
   "id": "d4dc73ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 547,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "residualsSweden2 = Y - prediction\n",
    "plt.plot(residualsSweden2)\n",
    "plt.title('Residuals Sweden 2Y')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 549,
   "id": "86bcf90c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Jarque-Bera', 15.7240275340081),\n",
       " ('JB P-value', 0.00038509759318618923),\n",
       " ('Skew', 0.8422916362245644),\n",
       " ('Kurtosis', 3.145235310021241)]"
      ]
     },
     "execution_count": 549,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normality of the residuals\n",
    "\n",
    "residualsSweden2 = Y - prediction\n",
    "xs_with_constant = sm.add_constant(X)\n",
    "\n",
    "name = ['Jarque-Bera', 'JB P-value', 'Skew', 'Kurtosis']\n",
    "test = sms.jarque_bera(residualsSweden2)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 760,
   "id": "338f8ca0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Lagrange multiplier statistic', 44.12739351495608),\n",
       " ('p-value', 2.617328582135136e-10),\n",
       " ('f-value', 32.39026353678376),\n",
       " ('f p-value', 3.995146843849631e-12)]"
      ]
     },
     "execution_count": 760,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Breush Pagan Test for Heteroskedastic residuals\n",
    "\n",
    "name = ['Lagrange multiplier statistic', 'p-value',\n",
    "        'f-value', 'f p-value']\n",
    "\n",
    "test = sms.het_breuschpagan(residualsSweden2, results.model.exog)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99c21c16",
   "metadata": {},
   "source": [
    "### Autocorrelation Sweden 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 551,
   "id": "59d044cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Durbin Watson Test Statistics 0.11404581254659873\n"
     ]
    }
   ],
   "source": [
    "#JB Test for Normal Distribution of Residuals\n",
    "dw_pvalue1=sm.stats.stattools.durbin_watson(residualsSweden2)\n",
    "print(\"\\n\",\"Durbin Watson Test Statistics\", dw_pvalue1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9da442c6",
   "metadata": {},
   "source": [
    "### Multicollinearity Sweden 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 552,
   "id": "e67107be",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.384613</td>\n",
       "      <td>0.022425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNR</th>\n",
       "      <td>0.384613</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.263896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CPI</th>\n",
       "      <td>0.022425</td>\n",
       "      <td>-0.263896</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Benchmark 2y       UNR       CPI\n",
       "Benchmark 2y      1.000000  0.384613  0.022425\n",
       "UNR               0.384613  1.000000 -0.263896\n",
       "CPI               0.022425 -0.263896  1.000000"
      ]
     },
     "execution_count": 552,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = dfSweden[['Benchmark 2y','UNR', 'CPI', ]].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "id": "1148bfac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 415,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 554,
   "id": "cd7802b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_0efc2_row0_col0, #T_0efc2_row1_col1, #T_0efc2_row2_col2 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_0efc2_row0_col1 {\n",
       "  background-color: #e0dbd8;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_0efc2_row0_col2 {\n",
       "  background-color: #84a7fc;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_0efc2_row1_col0 {\n",
       "  background-color: #b6cefa;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_0efc2_row1_col2, #T_0efc2_row2_col0, #T_0efc2_row2_col1 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_0efc2_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Benchmark 2y</th>\n",
       "      <th class=\"col_heading level0 col1\" >UNR</th>\n",
       "      <th class=\"col_heading level0 col2\" >CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_0efc2_level0_row0\" class=\"row_heading level0 row0\" >Benchmark 2y</th>\n",
       "      <td id=\"T_0efc2_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_0efc2_row0_col1\" class=\"data row0 col1\" >0.384613</td>\n",
       "      <td id=\"T_0efc2_row0_col2\" class=\"data row0 col2\" >0.022425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_0efc2_level0_row1\" class=\"row_heading level0 row1\" >UNR</th>\n",
       "      <td id=\"T_0efc2_row1_col0\" class=\"data row1 col0\" >0.384613</td>\n",
       "      <td id=\"T_0efc2_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_0efc2_row1_col2\" class=\"data row1 col2\" >-0.263896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_0efc2_level0_row2\" class=\"row_heading level0 row2\" >CPI</th>\n",
       "      <td id=\"T_0efc2_row2_col0\" class=\"data row2 col0\" >0.022425</td>\n",
       "      <td id=\"T_0efc2_row2_col1\" class=\"data row2 col1\" >-0.263896</td>\n",
       "      <td id=\"T_0efc2_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fdf382ba160>"
      ]
     },
     "execution_count": 554,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d309d31",
   "metadata": {},
   "source": [
    "## Regression Sweden 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 633,
   "id": "336e2ca8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 10y</td>  <th>  R-squared:         </th> <td>   0.054</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.039</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   3.664</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 02 May 2022</td> <th>  Prob (F-statistic):</th>  <td>0.0283</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>21:21:00</td>     <th>  Log-Likelihood:    </th> <td> -167.23</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>   340.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>   349.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>   -0.5563</td> <td>    0.641</td> <td>   -0.867</td> <td> 0.387</td> <td>   -1.825</td> <td>    0.713</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>    0.2015</td> <td>    0.079</td> <td>    2.550</td> <td> 0.012</td> <td>    0.045</td> <td>    0.358</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>   -0.0155</td> <td>    0.076</td> <td>   -0.203</td> <td> 0.839</td> <td>   -0.167</td> <td>    0.136</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 6.696</td> <th>  Durbin-Watson:     </th> <td>   0.063</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.035</td> <th>  Jarque-Bera (JB):  </th> <td>   6.959</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.553</td> <th>  Prob(JB):          </th> <td>  0.0308</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.799</td> <th>  Cond. No.          </th> <td>    67.6</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Benchmark 10y   R-squared:                       0.054\n",
       "Model:                            OLS   Adj. R-squared:                  0.039\n",
       "Method:                 Least Squares   F-statistic:                     3.664\n",
       "Date:                Mon, 02 May 2022   Prob (F-statistic):             0.0283\n",
       "Time:                        21:21:00   Log-Likelihood:                -167.23\n",
       "No. Observations:                 132   AIC:                             340.5\n",
       "Df Residuals:                     129   BIC:                             349.1\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         -0.5563      0.641     -0.867      0.387      -1.825       0.713\n",
       "UNR            0.2015      0.079      2.550      0.012       0.045       0.358\n",
       "CPI           -0.0155      0.076     -0.203      0.839      -0.167       0.136\n",
       "==============================================================================\n",
       "Omnibus:                        6.696   Durbin-Watson:                   0.063\n",
       "Prob(Omnibus):                  0.035   Jarque-Bera (JB):                6.959\n",
       "Skew:                           0.553   Prob(JB):                       0.0308\n",
       "Kurtosis:                       2.799   Cond. No.                         67.6\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 633,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = dfSweden['Benchmark 10y']\n",
    "X = dfSweden[['UNR', 'CPI']]\n",
    "X = X.astype('float64')\n",
    "Y = Y.astype('float64')\n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(Y,X)\n",
    "resultsSweden10 = model.fit()\n",
    "resultsSweden10.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 634,
   "id": "4ed6b4e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>3.346</td>\n",
       "      <td>1.143767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>3.325</td>\n",
       "      <td>1.083323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>3.332</td>\n",
       "      <td>1.135998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>3.210</td>\n",
       "      <td>1.069340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>2.907</td>\n",
       "      <td>1.069340</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 10y  Prediction\n",
       "Date                                 \n",
       "2011-01-31          3.346    1.143767\n",
       "2011-02-28          3.325    1.083323\n",
       "2011-03-31          3.332    1.135998\n",
       "2011-04-30          3.210    1.069340\n",
       "2011-05-31          2.907    1.069340"
      ]
     },
     "execution_count": 634,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressionSweden10 = pd.DataFrame(Y)\n",
    "\n",
    "prediction = resultsSweden10.predict()\n",
    "\n",
    "regressionSweden10['Prediction']=prediction\n",
    "regressionSweden10.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 635,
   "id": "5aa4a097",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 635,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(regressionSweden10)\n",
    "labels=['Observed','Prediction']\n",
    "plt.legend(labels)\n",
    "plt.title('Observed vs. Predicted Inflation')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "331ae51e",
   "metadata": {},
   "source": [
    "### Heteroskedasticity Sweden 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 636,
   "id": "cad0d6d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 636,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "residualsSweden10 = Y - prediction\n",
    "plt.plot(residualsSweden10)\n",
    "plt.title('Residuals Sweden 10Y')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 637,
   "id": "e1b1c152",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[('Jarque-Bera', 6.9590209008062),\n",
       " ('JB P-value', 0.030822496480639866),\n",
       " ('Skew', 0.5534036246138371),\n",
       " ('Kurtosis', 2.7993654055842354)]"
      ]
     },
     "execution_count": 637,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normality of the residuals\n",
    "\n",
    "residualsSweden10 = Y - prediction\n",
    "xs_with_constant = sm.add_constant(X)\n",
    "\n",
    "name = ['Jarque-Bera', 'JB P-value', 'Skew', 'Kurtosis']\n",
    "test = sms.jarque_bera(residualsSweden10)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 761,
   "id": "178dcf38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Lagrange multiplier statistic', 41.54808009349475),\n",
       " ('p-value', 9.5049325836759e-10),\n",
       " ('f-value', 29.627355271180676),\n",
       " ('f p-value', 2.581837237091878e-11)]"
      ]
     },
     "execution_count": 761,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Breush Pagan Test for Heteroskedastic residuals\n",
    "\n",
    "name = ['Lagrange multiplier statistic', 'p-value',\n",
    "        'f-value', 'f p-value']\n",
    "\n",
    "test = sms.het_breuschpagan(residualsSweden10, results.model.exog)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3177d52",
   "metadata": {},
   "source": [
    "### Autocorrelation Sweden 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 638,
   "id": "460099e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Durbin Watson Test Statistics 0.06318391935211021\n"
     ]
    }
   ],
   "source": [
    "#JB Test for Normal Distribution of Residuals\n",
    "dw_pvalue1=sm.stats.stattools.durbin_watson(residualsSweden10)\n",
    "print(\"\\n\",\"Durbin Watson Test Statistics\", dw_pvalue1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "521e6c18",
   "metadata": {},
   "source": [
    "### Multicollinearity Sweden 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 639,
   "id": "20f8b9ee",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.231183</td>\n",
       "      <td>-0.077795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNR</th>\n",
       "      <td>0.231183</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.263896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CPI</th>\n",
       "      <td>-0.077795</td>\n",
       "      <td>-0.263896</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Benchmark 10y       UNR       CPI\n",
       "Benchmark 10y       1.000000  0.231183 -0.077795\n",
       "UNR                 0.231183  1.000000 -0.263896\n",
       "CPI                -0.077795 -0.263896  1.000000"
      ]
     },
     "execution_count": 639,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = dfSweden[['Benchmark 10y','UNR', 'CPI', ]].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 640,
   "id": "79df4b39",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 640,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 641,
   "id": "425c0010",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_cc4d1_row0_col0, #T_cc4d1_row1_col1, #T_cc4d1_row2_col2 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_cc4d1_row0_col1 {\n",
       "  background-color: #bed2f6;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_cc4d1_row0_col2 {\n",
       "  background-color: #688aef;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_cc4d1_row1_col0 {\n",
       "  background-color: #9abbff;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_cc4d1_row1_col2, #T_cc4d1_row2_col0, #T_cc4d1_row2_col1 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_cc4d1_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Benchmark 10y</th>\n",
       "      <th class=\"col_heading level0 col1\" >UNR</th>\n",
       "      <th class=\"col_heading level0 col2\" >CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_cc4d1_level0_row0\" class=\"row_heading level0 row0\" >Benchmark 10y</th>\n",
       "      <td id=\"T_cc4d1_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_cc4d1_row0_col1\" class=\"data row0 col1\" >0.231183</td>\n",
       "      <td id=\"T_cc4d1_row0_col2\" class=\"data row0 col2\" >-0.077795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_cc4d1_level0_row1\" class=\"row_heading level0 row1\" >UNR</th>\n",
       "      <td id=\"T_cc4d1_row1_col0\" class=\"data row1 col0\" >0.231183</td>\n",
       "      <td id=\"T_cc4d1_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_cc4d1_row1_col2\" class=\"data row1 col2\" >-0.263896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_cc4d1_level0_row2\" class=\"row_heading level0 row2\" >CPI</th>\n",
       "      <td id=\"T_cc4d1_row2_col0\" class=\"data row2 col0\" >-0.077795</td>\n",
       "      <td id=\"T_cc4d1_row2_col1\" class=\"data row2 col1\" >-0.263896</td>\n",
       "      <td id=\"T_cc4d1_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fdf999388b0>"
      ]
     },
     "execution_count": 641,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d7557eb",
   "metadata": {},
   "source": [
    "\n",
    "# Analysis South Korea"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2ab5a7f",
   "metadata": {},
   "source": [
    "## Regression South Korea 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 642,
   "id": "75e95479",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 2y</td>   <th>  R-squared:         </th> <td>   0.554</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.547</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   80.09</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 02 May 2022</td> <th>  Prob (F-statistic):</th> <td>2.45e-23</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>21:21:09</td>     <th>  Log-Likelihood:    </th> <td> -107.88</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>   221.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>   230.4</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>    5.1385</td> <td>    0.555</td> <td>    9.262</td> <td> 0.000</td> <td>    4.041</td> <td>    6.236</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>   -1.0144</td> <td>    0.146</td> <td>   -6.960</td> <td> 0.000</td> <td>   -1.303</td> <td>   -0.726</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>    0.3510</td> <td>    0.047</td> <td>    7.473</td> <td> 0.000</td> <td>    0.258</td> <td>    0.444</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>16.737</td> <th>  Durbin-Watson:     </th> <td>   0.293</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  18.853</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.870</td> <th>  Prob(JB):          </th> <td>8.06e-05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.635</td> <th>  Cond. No.          </th> <td>    48.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:           Benchmark 2y   R-squared:                       0.554\n",
       "Model:                            OLS   Adj. R-squared:                  0.547\n",
       "Method:                 Least Squares   F-statistic:                     80.09\n",
       "Date:                Mon, 02 May 2022   Prob (F-statistic):           2.45e-23\n",
       "Time:                        21:21:09   Log-Likelihood:                -107.88\n",
       "No. Observations:                 132   AIC:                             221.8\n",
       "Df Residuals:                     129   BIC:                             230.4\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const          5.1385      0.555      9.262      0.000       4.041       6.236\n",
       "UNR           -1.0144      0.146     -6.960      0.000      -1.303      -0.726\n",
       "CPI            0.3510      0.047      7.473      0.000       0.258       0.444\n",
       "==============================================================================\n",
       "Omnibus:                       16.737   Durbin-Watson:                   0.293\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               18.853\n",
       "Skew:                          -0.870   Prob(JB):                     8.06e-05\n",
       "Kurtosis:                       3.635   Cond. No.                         48.3\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 642,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = dfSouthKorea['Benchmark 2y']\n",
    "X = dfSouthKorea[['UNR', 'CPI']]\n",
    "X = X.astype('float64')\n",
    "Y = Y.astype('float64')\n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(Y,X)\n",
    "resultsSouthKorea2 = model.fit()\n",
    "resultsSouthKorea2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 643,
   "id": "0c861fe7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>3.87</td>\n",
       "      <td>2.781716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>3.64</td>\n",
       "      <td>2.754359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>3.57</td>\n",
       "      <td>2.723129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>3.70</td>\n",
       "      <td>2.922130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>3.52</td>\n",
       "      <td>3.160108</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 2y  Prediction\n",
       "Date                                \n",
       "2011-01-31          3.87    2.781716\n",
       "2011-02-28          3.64    2.754359\n",
       "2011-03-31          3.57    2.723129\n",
       "2011-04-30          3.70    2.922130\n",
       "2011-05-31          3.52    3.160108"
      ]
     },
     "execution_count": 643,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressionSouthKorea2 = pd.DataFrame(Y)\n",
    "\n",
    "prediction = resultsSouthKorea2.predict()\n",
    "\n",
    "regressionSouthKorea2['Prediction']=prediction\n",
    "regressionSouthKorea2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 644,
   "id": "97484a2b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 644,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(regressionSouthKorea2)\n",
    "labels=['Observed','Prediction']\n",
    "plt.legend(labels)\n",
    "plt.title('Observed vs. Predicted Inflation')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "776291b1",
   "metadata": {},
   "source": [
    "## Heteroskedasticity South Korea 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 645,
   "id": "eb18595c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 645,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "residualsSouthKorea2 = Y - prediction\n",
    "plt.plot(residualsSouthKorea2)\n",
    "plt.title('Residuals South Korea 2Y')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 649,
   "id": "c005213f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Jarque-Bera', 18.853219684325435),\n",
       " ('JB P-value', 8.055182094826635e-05),\n",
       " ('Skew', -0.8695350479431354),\n",
       " ('Kurtosis', 3.6352112451908605)]"
      ]
     },
     "execution_count": 649,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normality of the residuals\n",
    "\n",
    "residualsSouthKorea2 = Y - prediction\n",
    "xs_with_constant = sm.add_constant(X)\n",
    "\n",
    "name = ['Jarque-Bera', 'JB P-value', 'Skew', 'Kurtosis']\n",
    "test = sms.jarque_bera(residualsSouthKorea2)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 762,
   "id": "0124e8d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Lagrange multiplier statistic', 58.363112898119724),\n",
       " ('p-value', 2.1213438086205063e-13),\n",
       " ('f-value', 51.12140029385625),\n",
       " ('f p-value', 4.4733831020532136e-17)]"
      ]
     },
     "execution_count": 762,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Breush Pagan Test for Heteroskedastic residuals\n",
    "\n",
    "name = ['Lagrange multiplier statistic', 'p-value',\n",
    "        'f-value', 'f p-value']\n",
    "\n",
    "test = sms.het_breuschpagan(residualsSouthKorea2, results.model.exog)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65d59471",
   "metadata": {},
   "source": [
    "### Autocorrelation South Korea 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 650,
   "id": "12574b37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Durbin Watson Test Statistics 0.2933090610789733\n"
     ]
    }
   ],
   "source": [
    "#JB Test for Normal Distribution of Residuals\n",
    "dw_pvalue1=sm.stats.stattools.durbin_watson(residualsSouthKorea2)\n",
    "print(\"\\n\",\"Durbin Watson Test Statistics\", dw_pvalue1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e1a7cab",
   "metadata": {},
   "source": [
    "### Multicollinearity South Korea 2y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 663,
   "id": "eb7ca11a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Benchmark 2y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.600667</td>\n",
       "      <td>0.621610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNR</th>\n",
       "      <td>-0.600667</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.349409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CPI</th>\n",
       "      <td>0.621610</td>\n",
       "      <td>-0.349409</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Benchmark 2y       UNR       CPI\n",
       "Benchmark 2y      1.000000 -0.600667  0.621610\n",
       "UNR              -0.600667  1.000000 -0.349409\n",
       "CPI               0.621610 -0.349409  1.000000"
      ]
     },
     "execution_count": 663,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = dfSouthKorea[['Benchmark 2y','UNR', 'CPI', ]].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "id": "c75b9238",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 664,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 665,
   "id": "26f4c76c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_c35af_row0_col0, #T_c35af_row1_col1, #T_c35af_row2_col2 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_c35af_row0_col1, #T_c35af_row1_col0, #T_c35af_row1_col2 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_c35af_row0_col2 {\n",
       "  background-color: #f6a586;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_c35af_row2_col0 {\n",
       "  background-color: #f39475;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_c35af_row2_col1 {\n",
       "  background-color: #6c8ff1;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_c35af_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Benchmark 2y</th>\n",
       "      <th class=\"col_heading level0 col1\" >UNR</th>\n",
       "      <th class=\"col_heading level0 col2\" >CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_c35af_level0_row0\" class=\"row_heading level0 row0\" >Benchmark 2y</th>\n",
       "      <td id=\"T_c35af_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_c35af_row0_col1\" class=\"data row0 col1\" >-0.600667</td>\n",
       "      <td id=\"T_c35af_row0_col2\" class=\"data row0 col2\" >0.621610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_c35af_level0_row1\" class=\"row_heading level0 row1\" >UNR</th>\n",
       "      <td id=\"T_c35af_row1_col0\" class=\"data row1 col0\" >-0.600667</td>\n",
       "      <td id=\"T_c35af_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_c35af_row1_col2\" class=\"data row1 col2\" >-0.349409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_c35af_level0_row2\" class=\"row_heading level0 row2\" >CPI</th>\n",
       "      <td id=\"T_c35af_row2_col0\" class=\"data row2 col0\" >0.621610</td>\n",
       "      <td id=\"T_c35af_row2_col1\" class=\"data row2 col1\" >-0.349409</td>\n",
       "      <td id=\"T_c35af_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fdf999f48e0>"
      ]
     },
     "execution_count": 665,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c2b680d",
   "metadata": {},
   "source": [
    "## Regression South Korea 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 654,
   "id": "00368cbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/philipplochbuhler/opt/anaconda3/lib/python3.9/site-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
      "  x = pd.concat(x[::order], 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 10y</td>  <th>  R-squared:         </th> <td>   0.562</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.556</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   82.92</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 02 May 2022</td> <th>  Prob (F-statistic):</th> <td>7.00e-24</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>21:21:44</td>     <th>  Log-Likelihood:    </th> <td> -111.11</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>   228.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>   236.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>    4.9925</td> <td>    0.569</td> <td>    8.781</td> <td> 0.000</td> <td>    3.868</td> <td>    6.117</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>   -0.8670</td> <td>    0.149</td> <td>   -5.805</td> <td> 0.000</td> <td>   -1.163</td> <td>   -0.572</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>    0.4209</td> <td>    0.048</td> <td>    8.742</td> <td> 0.000</td> <td>    0.326</td> <td>    0.516</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 0.818</td> <th>  Durbin-Watson:     </th> <td>   0.283</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.664</td> <th>  Jarque-Bera (JB):  </th> <td>   0.635</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.169</td> <th>  Prob(JB):          </th> <td>   0.728</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.031</td> <th>  Cond. No.          </th> <td>    48.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          Benchmark 10y   R-squared:                       0.562\n",
       "Model:                            OLS   Adj. R-squared:                  0.556\n",
       "Method:                 Least Squares   F-statistic:                     82.92\n",
       "Date:                Mon, 02 May 2022   Prob (F-statistic):           7.00e-24\n",
       "Time:                        21:21:44   Log-Likelihood:                -111.11\n",
       "No. Observations:                 132   AIC:                             228.2\n",
       "Df Residuals:                     129   BIC:                             236.9\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const          4.9925      0.569      8.781      0.000       3.868       6.117\n",
       "UNR           -0.8670      0.149     -5.805      0.000      -1.163      -0.572\n",
       "CPI            0.4209      0.048      8.742      0.000       0.326       0.516\n",
       "==============================================================================\n",
       "Omnibus:                        0.818   Durbin-Watson:                   0.283\n",
       "Prob(Omnibus):                  0.664   Jarque-Bera (JB):                0.635\n",
       "Skew:                          -0.169   Prob(JB):                        0.728\n",
       "Kurtosis:                       3.031   Cond. No.                         48.3\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 654,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = dfSouthKorea['Benchmark 10y']\n",
    "X = dfSouthKorea[['UNR', 'CPI']]\n",
    "X = X.astype('float64')\n",
    "Y = Y.astype('float64')\n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(Y,X)\n",
    "resultsSouthKorea10 = model.fit()\n",
    "resultsSouthKorea10.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 655,
   "id": "6478bbf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-31</th>\n",
       "      <td>4.71</td>\n",
       "      <td>3.388864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-02-28</th>\n",
       "      <td>4.67</td>\n",
       "      <td>3.425899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-03-31</th>\n",
       "      <td>4.48</td>\n",
       "      <td>3.423372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-04-30</th>\n",
       "      <td>4.48</td>\n",
       "      <td>3.557216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-05-31</th>\n",
       "      <td>4.23</td>\n",
       "      <td>3.772710</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Benchmark 10y  Prediction\n",
       "Date                                 \n",
       "2011-01-31           4.71    3.388864\n",
       "2011-02-28           4.67    3.425899\n",
       "2011-03-31           4.48    3.423372\n",
       "2011-04-30           4.48    3.557216\n",
       "2011-05-31           4.23    3.772710"
      ]
     },
     "execution_count": 655,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressionSouthKorea10 = pd.DataFrame(Y)\n",
    "\n",
    "prediction = resultsSouthKorea10.predict()\n",
    "\n",
    "regressionSouthKorea10['Prediction']=prediction\n",
    "regressionSouthKorea10.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 656,
   "id": "0d8959c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 656,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(regressionSouthKorea10)\n",
    "labels=['Observed','Prediction']\n",
    "plt.legend(labels)\n",
    "plt.title('Observed vs. Predicted Inflation')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c577234",
   "metadata": {},
   "source": [
    "### Heteroskedasticity South Korea 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 657,
   "id": "7c4f451f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 657,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "residualsSouthKorea10 = Y - prediction\n",
    "plt.plot(residualsSouthKorea10)\n",
    "plt.title('Residuals South Korea 10Y')\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 659,
   "id": "aae5c91a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Jarque-Bera', 0.6350015101184197),\n",
       " ('JB P-value', 0.7279661311165724),\n",
       " ('Skew', -0.16920681731807724),\n",
       " ('Kurtosis', 3.0305128155678593)]"
      ]
     },
     "execution_count": 659,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normality of the residuals\n",
    "\n",
    "residualsSouthKorea10 = Y - prediction\n",
    "xs_with_constant = sm.add_constant(X)\n",
    "\n",
    "name = ['Jarque-Bera', 'JB P-value', 'Skew', 'Kurtosis']\n",
    "test = sms.jarque_bera(residualsSouthKorea10)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 763,
   "id": "3426436f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Lagrange multiplier statistic', 30.980340610555075),\n",
       " ('p-value', 1.8737192243701434e-07),\n",
       " ('f-value', 19.780624696796277),\n",
       " ('f p-value', 3.21485935515928e-08)]"
      ]
     },
     "execution_count": 763,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Breush Pagan Test for Heteroskedastic residuals\n",
    "\n",
    "name = ['Lagrange multiplier statistic', 'p-value',\n",
    "        'f-value', 'f p-value']\n",
    "\n",
    "test = sms.het_breuschpagan(residualsSouthKorea10, results.model.exog)\n",
    "lzip(name, test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84cf1d48",
   "metadata": {},
   "source": [
    "### Autocorrelation South Korea 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 660,
   "id": "1578c2f2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Durbin Watson Test Statistics 0.2829871489760538\n"
     ]
    }
   ],
   "source": [
    "#JB Test for Normal Distribution of Residuals\n",
    "dw_pvalue1=sm.stats.stattools.durbin_watson(residualsSouthKorea10)\n",
    "print(\"\\n\",\"Durbin Watson Test Statistics\", dw_pvalue1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2acc7b61",
   "metadata": {},
   "source": [
    "### Multicollinearity South Korea 10y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 662,
   "id": "016c7335",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <th>UNR</th>\n",
       "      <th>CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Benchmark 10y</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.550666</td>\n",
       "      <td>0.669464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UNR</th>\n",
       "      <td>-0.550666</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.349409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CPI</th>\n",
       "      <td>0.669464</td>\n",
       "      <td>-0.349409</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Benchmark 10y       UNR       CPI\n",
       "Benchmark 10y       1.000000 -0.550666  0.669464\n",
       "UNR                -0.550666  1.000000 -0.349409\n",
       "CPI                 0.669464 -0.349409  1.000000"
      ]
     },
     "execution_count": 662,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = dfSouthKorea[['Benchmark 10y','UNR', 'CPI', ]].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 666,
   "id": "46e54535",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 666,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 667,
   "id": "70c1d760",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_c8e26_row0_col0, #T_c8e26_row1_col1, #T_c8e26_row2_col2 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_c8e26_row0_col1, #T_c8e26_row1_col0, #T_c8e26_row1_col2 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_c8e26_row0_col2 {\n",
       "  background-color: #f6a586;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_c8e26_row2_col0 {\n",
       "  background-color: #f39475;\n",
       "  color: #000000;\n",
       "}\n",
       "#T_c8e26_row2_col1 {\n",
       "  background-color: #6c8ff1;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_c8e26_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >Benchmark 2y</th>\n",
       "      <th class=\"col_heading level0 col1\" >UNR</th>\n",
       "      <th class=\"col_heading level0 col2\" >CPI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_c8e26_level0_row0\" class=\"row_heading level0 row0\" >Benchmark 2y</th>\n",
       "      <td id=\"T_c8e26_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
       "      <td id=\"T_c8e26_row0_col1\" class=\"data row0 col1\" >-0.600667</td>\n",
       "      <td id=\"T_c8e26_row0_col2\" class=\"data row0 col2\" >0.621610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_c8e26_level0_row1\" class=\"row_heading level0 row1\" >UNR</th>\n",
       "      <td id=\"T_c8e26_row1_col0\" class=\"data row1 col0\" >-0.600667</td>\n",
       "      <td id=\"T_c8e26_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "      <td id=\"T_c8e26_row1_col2\" class=\"data row1 col2\" >-0.349409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_c8e26_level0_row2\" class=\"row_heading level0 row2\" >CPI</th>\n",
       "      <td id=\"T_c8e26_row2_col0\" class=\"data row2 col0\" >0.621610</td>\n",
       "      <td id=\"T_c8e26_row2_col1\" class=\"data row2 col1\" >-0.349409</td>\n",
       "      <td id=\"T_c8e26_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fdf49aa2040>"
      ]
     },
     "execution_count": 667,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.style.background_gradient(cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3fc75e5a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "5dbc1505",
   "metadata": {},
   "source": [
    "# export to results table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 718,
   "id": "fc91f0d7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>Benchmark 2y</td>   <th>  R-squared:         </th> <td>   0.463</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.455</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   55.71</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 03 May 2022</td> <th>  Prob (F-statistic):</th> <td>3.63e-18</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>08:33:00</td>     <th>  Log-Likelihood:    </th> <td> -110.40</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   132</td>      <th>  AIC:               </th> <td>   226.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   129</td>      <th>  BIC:               </th> <td>   235.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>    2.4189</td> <td>    0.174</td> <td>   13.880</td> <td> 0.000</td> <td>    2.074</td> <td>    2.764</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>UNR</th>   <td>   -0.2519</td> <td>    0.024</td> <td>  -10.553</td> <td> 0.000</td> <td>   -0.299</td> <td>   -0.205</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>CPI</th>   <td>   -0.0234</td> <td>    0.038</td> <td>   -0.623</td> <td> 0.534</td> <td>   -0.098</td> <td>    0.051</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>17.470</td> <th>  Durbin-Watson:     </th> <td>   0.224</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  20.601</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.961</td> <th>  Prob(JB):          </th> <td>3.36e-05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.225</td> <th>  Cond. No.          </th> <td>    24.0</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:           Benchmark 2y   R-squared:                       0.463\n",
       "Model:                            OLS   Adj. R-squared:                  0.455\n",
       "Method:                 Least Squares   F-statistic:                     55.71\n",
       "Date:                Tue, 03 May 2022   Prob (F-statistic):           3.63e-18\n",
       "Time:                        08:33:00   Log-Likelihood:                -110.40\n",
       "No. Observations:                 132   AIC:                             226.8\n",
       "Df Residuals:                     129   BIC:                             235.5\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const          2.4189      0.174     13.880      0.000       2.074       2.764\n",
       "UNR           -0.2519      0.024    -10.553      0.000      -0.299      -0.205\n",
       "CPI           -0.0234      0.038     -0.623      0.534      -0.098       0.051\n",
       "==============================================================================\n",
       "Omnibus:                       17.470   Durbin-Watson:                   0.224\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               20.601\n",
       "Skew:                           0.961   Prob(JB):                     3.36e-05\n",
       "Kurtosis:                       3.225   Cond. No.                         24.0\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 718,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "resultsUSA2.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41729030",
   "metadata": {},
   "source": [
    "# Export regression results to LaTex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 730,
   "id": "1df73410",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting stargazer\n",
      "  Downloading stargazer-0.0.5-py3-none-any.whl (9.7 kB)\n",
      "Installing collected packages: stargazer\n",
      "Successfully installed stargazer-0.0.5\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install stargazer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 731,
   "id": "c8626884",
   "metadata": {},
   "outputs": [],
   "source": [
    "from stargazer.stargazer import Stargazer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 734,
   "id": "e5714ec4",
   "metadata": {},
   "outputs": [],
   "source": [
    "Results_export = Stargazer([resultsUSA2, resultsUSA10, resultsSweden2, resultsSweden10, resultsSouthKorea2, resultsSouthKorea10, resultsSouthKorea10, resultsJapan2, resultsJapan10, resultsGermany2, resultsGermany10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 735,
   "id": "ae72bc45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table style=\"text-align:center\"><tr><td colspan=\"12\" style=\"border-bottom: 1px solid black\"></td></tr><tr><td style=\"text-align:left\"></td><tr><td style=\"text-align:left\"></td><td>(1)</td><td>(2)</td><td>(3)</td><td>(4)</td><td>(5)</td><td>(6)</td><td>(7)</td><td>(8)</td><td>(9)</td><td>(10)</td><td>(11)</td></tr><tr><td colspan=\"12\" style=\"border-bottom: 1px solid black\"></td></tr><tr><td style=\"text-align:left\">CPI</td><td>-0.023<sup></sup></td><td>0.017<sup></sup></td><td>0.109<sup></sup></td><td>-0.016<sup></sup></td><td>0.351<sup>***</sup></td><td>0.421<sup>***</sup></td><td>0.421<sup>***</sup></td><td>0.030<sup>***</sup></td><td>0.041<sup>***</sup></td><td>0.109<sup></sup></td><td>0.135<sup>***</sup></td></tr><tr><td style=\"text-align:left\"></td><td>(0.038)</td><td>(0.042)</td><td>(0.068)</td><td>(0.076)</td><td>(0.047)</td><td>(0.048)</td><td>(0.048)</td><td>(0.005)</td><td>(0.012)</td><td>(0.068)</td><td>(0.041)</td></tr><tr><td style=\"text-align:left\">UNR</td><td>-0.252<sup>***</sup></td><td>-0.065<sup>**</sup></td><td>0.355<sup>***</sup></td><td>0.201<sup>**</sup></td><td>-1.014<sup>***</sup></td><td>-0.867<sup>***</sup></td><td>-0.867<sup>***</sup></td><td>0.172<sup>***</sup></td><td>0.526<sup>***</sup></td><td>0.355<sup>***</sup></td><td>1.156<sup>***</sup></td></tr><tr><td style=\"text-align:left\"></td><td>(0.024)</td><td>(0.027)</td><td>(0.071)</td><td>(0.079)</td><td>(0.146)</td><td>(0.149)</td><td>(0.149)</td><td>(0.007)</td><td>(0.016)</td><td>(0.071)</td><td>(0.055)</td></tr><tr><td style=\"text-align:left\">const</td><td>2.419<sup>***</sup></td><td>2.428<sup>***</sup></td><td>-2.765<sup>***</sup></td><td>-0.556<sup></sup></td><td>5.139<sup>***</sup></td><td>4.992<sup>***</sup></td><td>4.992<sup>***</sup></td><td>-0.626<sup>***</sup></td><td>-1.423<sup>***</sup></td><td>-2.765<sup>***</sup></td><td>-3.200<sup>***</sup></td></tr><tr><td style=\"text-align:left\"></td><td>(0.174)</td><td>(0.197)</td><td>(0.573)</td><td>(0.641)</td><td>(0.555)</td><td>(0.569)</td><td>(0.569)</td><td>(0.024)</td><td>(0.055)</td><td>(0.573)</td><td>(0.190)</td></tr><td colspan=\"12\" style=\"border-bottom: 1px solid black\"></td></tr><tr><td style=\"text-align: left\">Observations</td><td>132</td><td>132</td><td>132</td><td>132</td><td>132</td><td>132</td><td>132</td><td>132</td><td>132</td><td>132</td><td>132</td></tr><tr><td style=\"text-align: left\">R<sup>2</sup></td><td>0.463</td><td>0.045</td><td>0.164</td><td>0.054</td><td>0.554</td><td>0.562</td><td>0.562</td><td>0.826</td><td>0.892</td><td>0.164</td><td>0.772</td></tr><tr><td style=\"text-align: left\">Adjusted R<sup>2</sup></td><td>0.455</td><td>0.030</td><td>0.151</td><td>0.039</td><td>0.547</td><td>0.556</td><td>0.556</td><td>0.823</td><td>0.890</td><td>0.151</td><td>0.768</td></tr><tr><td style=\"text-align: left\">Residual Std. Error</td><td>0.565 (df=129)</td><td>0.637 (df=129)</td><td>0.776 (df=129)</td><td>0.869 (df=129)</td><td>0.554 (df=129)</td><td>0.568 (df=129)</td><td>0.568 (df=129)</td><td>0.059 (df=129)</td><td>0.135 (df=129)</td><td>0.776 (df=129)</td><td>0.463 (df=129)</td></tr><tr><td style=\"text-align: left\">F Statistic</td><td>55.713<sup>***</sup> (df=2; 129)</td><td>3.056<sup>*</sup> (df=2; 129)</td><td>12.693<sup>***</sup> (df=2; 129)</td><td>3.664<sup>**</sup> (df=2; 129)</td><td>80.086<sup>***</sup> (df=2; 129)</td><td>82.917<sup>***</sup> (df=2; 129)</td><td>82.917<sup>***</sup> (df=2; 129)</td><td>305.790<sup>***</sup> (df=2; 129)</td><td>530.628<sup>***</sup> (df=2; 129)</td><td>12.693<sup>***</sup> (df=2; 129)</td><td>218.376<sup>***</sup> (df=2; 129)</td></tr><tr><td colspan=\"12\" style=\"border-bottom: 1px solid black\"></td></tr><tr><td style=\"text-align: left\">Note:</td>\n",
       " <td colspan=\"11\" style=\"text-align: right\">\n",
       "  <sup>*</sup>p&lt;0.1;\n",
       "  <sup>**</sup>p&lt;0.05;\n",
       "  <sup>***</sup>p&lt;0.01\n",
       " </td></tr></table>"
      ],
      "text/plain": [
       "<stargazer.stargazer.Stargazer at 0x7fdf99809d30>"
      ]
     },
     "execution_count": 735,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Results_export"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 736,
   "id": "beae8e3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2177"
      ]
     },
     "execution_count": 736,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "open('regression.tex', 'w').write(Results_export.render_latex())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
